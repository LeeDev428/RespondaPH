{"ast":null,"code":"var $0294ea432cd92340$exports = require(\"./usePress.main.js\");\nvar $5sxTM$reactariautils = require(\"@react-aria/utils\");\nvar $5sxTM$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useLongPress\", function () {\n  return $3cd7b5d0eebf0ca9$export$c24ed0104d07eab9;\n});\nvar $3cd7b5d0eebf0ca9$var$DEFAULT_THRESHOLD = 500;\nfunction $3cd7b5d0eebf0ca9$export$c24ed0104d07eab9(props) {\n  var isDisabled = props.isDisabled,\n    onLongPressStart = props.onLongPressStart,\n    onLongPressEnd = props.onLongPressEnd,\n    onLongPress = props.onLongPress,\n    _props$threshold = props.threshold,\n    threshold = _props$threshold === void 0 ? $3cd7b5d0eebf0ca9$var$DEFAULT_THRESHOLD : _props$threshold,\n    accessibilityDescription = props.accessibilityDescription;\n  var timeRef = (0, $5sxTM$react.useRef)(undefined);\n  var _ref = (0, $5sxTM$reactariautils.useGlobalListeners)(),\n    addGlobalListener = _ref.addGlobalListener,\n    removeGlobalListener = _ref.removeGlobalListener;\n  var _ref2 = (0, $0294ea432cd92340$exports.usePress)({\n      isDisabled: isDisabled,\n      onPressStart: function onPressStart(e) {\n        e.continuePropagation();\n        if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n          if (onLongPressStart) onLongPressStart(Object.assign({}, e, {\n            type: 'longpressstart'\n          }));\n          timeRef.current = setTimeout(function () {\n            e.target.dispatchEvent(new PointerEvent('pointercancel', {\n              bubbles: true\n            }));\n            if ((0, $5sxTM$reactariautils.getOwnerDocument)(e.target).activeElement !== e.target) (0, $5sxTM$reactariautils.focusWithoutScrolling)(e.target);\n            if (onLongPress) onLongPress(Object.assign({}, e, {\n              type: 'longpress'\n            }));\n            timeRef.current = undefined;\n          }, threshold);\n          if (e.pointerType === 'touch') {\n            var onContextMenu = function onContextMenu(e) {\n              e.preventDefault();\n            };\n            addGlobalListener(e.target, 'contextmenu', onContextMenu, {\n              once: true\n            });\n            addGlobalListener(window, 'pointerup', function () {\n              setTimeout(function () {\n                removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n              }, 30);\n            }, {\n              once: true\n            });\n          }\n        }\n      },\n      onPressEnd: function onPressEnd(e) {\n        if (timeRef.current) clearTimeout(timeRef.current);\n        if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd(Object.assign({}, e, {\n          type: 'longpressend'\n        }));\n      }\n    }),\n    pressProps = _ref2.pressProps;\n  var descriptionProps = (0, $5sxTM$reactariautils.useDescription)(onLongPress && !isDisabled ? accessibilityDescription : undefined);\n  return {\n    longPressProps: (0, $5sxTM$reactariautils.mergeProps)(pressProps, descriptionProps)\n  };\n}","map":{"version":3,"names":["$3cd7b5d0eebf0ca9$var$DEFAULT_THRESHOLD","$3cd7b5d0eebf0ca9$export$c24ed0104d07eab9","props","isDisabled","onLongPressStart","onLongPressEnd","onLongPress","_props$threshold","threshold","accessibilityDescription","timeRef","$5sxTM$react","useRef","undefined","_ref","$5sxTM$reactariautils","useGlobalListeners","addGlobalListener","removeGlobalListener","_ref2","$0294ea432cd92340$exports","usePress","onPressStart","e","continuePropagation","pointerType","Object","assign","type","current","setTimeout","target","dispatchEvent","PointerEvent","bubbles","getOwnerDocument","activeElement","focusWithoutScrolling","onContextMenu","preventDefault","once","window","onPressEnd","clearTimeout","pressProps","descriptionProps","useDescription","longPressProps","mergeProps"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useLongPress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, LongPressEvent} from '@react-types/shared';\nimport {focusWithoutScrolling, getOwnerDocument, mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\nimport {useRef} from 'react';\n\nexport interface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\nexport interface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: DOMAttributes\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef<ReturnType<typeof setTimeout> | undefined>(undefined);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      e.continuePropagation();\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n\n          // Ensure target is focused. On touch devices, browsers typically focus on pointer up.\n          if (getOwnerDocument(e.target).activeElement !== e.target) {\n            focusWithoutScrolling(e.target as FocusableElement);\n          }\n\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = undefined;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : undefined);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}