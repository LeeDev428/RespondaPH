{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar $82z6W$reactariautils = require(\"@react-aria/utils\");\nvar $82z6W$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useHover\", function () {\n  return $ffbc150311c75f01$export$ae780daf29e6d456;\n});\nvar $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = false;\nvar $ffbc150311c75f01$var$hoverCount = 0;\nfunction $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = true;\n  setTimeout(function () {\n    $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\nfunction $ffbc150311c75f01$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $ffbc150311c75f01$var$setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') return;\n  if ($ffbc150311c75f01$var$hoverCount === 0) {\n    if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $ffbc150311c75f01$var$handleGlobalPointerEvent);else if (process.env.NODE_ENV === 'test') document.addEventListener('touchend', $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents);\n  }\n  $ffbc150311c75f01$var$hoverCount++;\n  return function () {\n    $ffbc150311c75f01$var$hoverCount--;\n    if ($ffbc150311c75f01$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $ffbc150311c75f01$var$handleGlobalPointerEvent);else if (process.env.NODE_ENV === 'test') document.removeEventListener('touchend', $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\nfunction $ffbc150311c75f01$export$ae780daf29e6d456(props) {\n  var onHoverStart = props.onHoverStart,\n    onHoverChange = props.onHoverChange,\n    onHoverEnd = props.onHoverEnd,\n    isDisabled = props.isDisabled;\n  var _ref = (0, $82z6W$react.useState)(false),\n    _ref2 = _slicedToArray(_ref, 2),\n    isHovered = _ref2[0],\n    setHovered = _ref2[1];\n  var state = (0, $82z6W$react.useRef)({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n  (0, $82z6W$react.useEffect)($ffbc150311c75f01$var$setupGlobalTouchEvents, []);\n  var _ref3 = (0, $82z6W$reactariautils.useGlobalListeners)(),\n    addGlobalListener = _ref3.addGlobalListener,\n    removeAllGlobalListeners = _ref3.removeAllGlobalListeners;\n  var _ref4 = (0, $82z6W$react.useMemo)(function () {\n      var triggerHoverStart = function triggerHoverStart(event, pointerType) {\n        state.pointerType = pointerType;\n        if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;\n        state.isHovered = true;\n        var target = event.currentTarget;\n        state.target = target;\n        addGlobalListener((0, $82z6W$reactariautils.getOwnerDocument)(event.target), 'pointerover', function (e) {\n          if (state.isHovered && state.target && !(0, $82z6W$reactariautils.nodeContains)(state.target, e.target)) triggerHoverEnd(e, e.pointerType);\n        }, {\n          capture: true\n        });\n        if (onHoverStart) onHoverStart({\n          type: 'hoverstart',\n          target: target,\n          pointerType: pointerType\n        });\n        if (onHoverChange) onHoverChange(true);\n        setHovered(true);\n      };\n      var triggerHoverEnd = function triggerHoverEnd(event, pointerType) {\n        var target = state.target;\n        state.pointerType = '';\n        state.target = null;\n        if (pointerType === 'touch' || !state.isHovered || !target) return;\n        state.isHovered = false;\n        removeAllGlobalListeners();\n        if (onHoverEnd) onHoverEnd({\n          type: 'hoverend',\n          target: target,\n          pointerType: pointerType\n        });\n        if (onHoverChange) onHoverChange(false);\n        setHovered(false);\n      };\n      var hoverProps = {};\n      if (typeof PointerEvent !== 'undefined') {\n        hoverProps.onPointerEnter = function (e) {\n          if ($ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;\n          triggerHoverStart(e, e.pointerType);\n        };\n        hoverProps.onPointerLeave = function (e) {\n          if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n        };\n      } else if (process.env.NODE_ENV === 'test') {\n        hoverProps.onTouchStart = function () {\n          state.ignoreEmulatedMouseEvents = true;\n        };\n        hoverProps.onMouseEnter = function (e) {\n          if (!state.ignoreEmulatedMouseEvents && !$ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');\n          state.ignoreEmulatedMouseEvents = false;\n        };\n        hoverProps.onMouseLeave = function (e) {\n          if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');\n        };\n      }\n      return {\n        hoverProps: hoverProps,\n        triggerHoverEnd: triggerHoverEnd\n      };\n    }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state, addGlobalListener, removeAllGlobalListeners]),\n    hoverProps = _ref4.hoverProps,\n    triggerHoverEnd = _ref4.triggerHoverEnd;\n  (0, $82z6W$react.useEffect)(function () {\n    if (isDisabled) triggerHoverEnd({\n      currentTarget: state.target\n    }, state.pointerType);\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  };\n}","map":{"version":3,"names":["$ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents","$ffbc150311c75f01$var$hoverCount","$ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents","setTimeout","$ffbc150311c75f01$var$handleGlobalPointerEvent","e","pointerType","$ffbc150311c75f01$var$setupGlobalTouchEvents","document","PointerEvent","addEventListener","process","env","NODE_ENV","removeEventListener","$ffbc150311c75f01$export$ae780daf29e6d456","props","onHoverStart","onHoverChange","onHoverEnd","isDisabled","_ref","$82z6W$react","useState","_ref2","_slicedToArray","isHovered","setHovered","state","useRef","ignoreEmulatedMouseEvents","target","current","useEffect","_ref3","$82z6W$reactariautils","useGlobalListeners","addGlobalListener","removeAllGlobalListeners","_ref4","useMemo","triggerHoverStart","event","currentTarget","contains","getOwnerDocument","nodeContains","triggerHoverEnd","capture","type","hoverProps","onPointerEnter","onPointerLeave","onTouchStart","onMouseEnter","onMouseLeave"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useHover.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes, HoverEvents} from '@react-types/shared';\nimport {getOwnerDocument, nodeContains, useGlobalListeners} from '@react-aria/utils';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: DOMAttributes,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e: PointerEvent) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (hoverCount === 0) {\n    if (typeof PointerEvent !== 'undefined') {\n      document.addEventListener('pointerup', handleGlobalPointerEvent);\n    } else if (process.env.NODE_ENV === 'test') {\n      document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else if (process.env.NODE_ENV === 'test') {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      // When an element that is hovered over is removed, no pointerleave event is fired by the browser,\n      // even though the originally hovered target may have shrunk in size so it is no longer hovered.\n      // However, a pointerover event will be fired on the new target the mouse is over.\n      // In Chrome this happens immediately. In Safari and Firefox, it happens upon moving the mouse one pixel.\n      addGlobalListener(getOwnerDocument(event.target), 'pointerover', e => {\n        if (state.isHovered && state.target && !nodeContains(state.target, e.target as Element)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      }, {capture: true});\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      let target = state.target;\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered || !target) {\n        return;\n      }\n\n      state.isHovered = false;\n      removeAllGlobalListeners();\n\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: DOMAttributes = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else if (process.env.NODE_ENV === 'test') {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state, addGlobalListener, removeAllGlobalListeners]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;AAmCA,IAAIA,qDAAA,GAAkC;AACtC,IAAIC,gCAAA,GAAa;AAEjB,SAASC,yDAAA;EACPF,qDAAA,GAAkC;EAMlCG,UAAA,CAAW;IACTH,qDAAA,GAAkC;EACpC,GAAG;AACL;AAEA,SAASI,+CAAyBC,CAAe;EAC/C,IAAIA,CAAA,CAAEC,WAAW,KAAK,SACpBJ,wDAAA;AAEJ;AAEA,SAASK,6CAAA;EACP,IAAI,OAAOC,QAAA,KAAa,aACtB;EAGF,IAAIP,gCAAA,KAAe,GAAG;IACpB,IAAI,OAAOQ,YAAA,KAAiB,aAC1BD,QAAA,CAASE,gBAAgB,CAAC,aAAaN,8CAAA,OAClC,IAAIO,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,QAClCL,QAAA,CAASE,gBAAgB,CAAC,YAAYR,wDAAA;EAE1C;EAEAD,gCAAA;EACA,OAAO;IACLA,gCAAA;IACA,IAAIA,gCAAA,GAAa,GACf;IAGF,IAAI,OAAOQ,YAAA,KAAiB,aAC1BD,QAAA,CAASM,mBAAmB,CAAC,aAAaV,8CAAA,OACrC,IAAIO,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,QAClCL,QAAA,CAASM,mBAAmB,CAAC,YAAYZ,wDAAA;EAE7C;AACF;AAMO,SAASa,0CAASC,KAAiB;EACxC,IACEC,YAAY,GAIVD,KAAA,CALAC,YAAA;IAEFC,aAAa,GAGXF,KAAA,CAJUE,aAAA;IAEZC,UAAU,GAERH,KAAA,CAHWG,UAAA;IAEbC,UAAU,GACRJ,KAAA,CAFQI,UAAA;EAIZ,IAAAC,IAAA,GAA8B,IAAAC,YAAA,CAAAC,QAAO,EAAE;IAAAC,KAAA,GAAAC,cAAA,CAAAJ,IAAA;IAAlCK,SAAA,GAAAF,KAAA;IAAWG,UAAA,GAAAH,KAAA;EAChB,IAAII,KAAA,GAAQ,IAAAN,YAAA,CAAAO,MAAK,EAAE;IACjBH,SAAA,EAAW;IACXI,yBAAA,EAA2B;IAC3BxB,WAAA,EAAa;IACbyB,MAAA,EAAQ;EACV,GAAGC,OAAO;EAEV,IAAAV,YAAA,CAAAW,SAAQ,EAAE1B,4CAAA,EAAwB,EAAE;EACpC,IAAA2B,KAAA,GAAoD,IAAAC,qBAAA,CAAAC,kBAAiB;IAAhEC,iBAAiB,GAAAH,KAAA,CAAlBG,iBAAA;IAAoBC,wBAAwB,GAAAJ,KAAA,CAA1BI,wBAAA;EAEtB,IAAAC,KAAA,GAAoC,IAAAjB,YAAA,CAAAkB,OAAM,EAAE;MAC1C,IAAIC,iBAAA,GAAoB,SAApBA,kBAAqBC,KAAA,EAAOpC,WAAA;QAC9BsB,KAAA,CAAMtB,WAAW,GAAGA,WAAA;QACpB,IAAIc,UAAA,IAAcd,WAAA,KAAgB,WAAWsB,KAAA,CAAMF,SAAS,IAAI,CAACgB,KAAA,CAAMC,aAAa,CAACC,QAAQ,CAACF,KAAA,CAAMX,MAAM,GACxG;QAGFH,KAAA,CAAMF,SAAS,GAAG;QAClB,IAAIK,MAAA,GAASW,KAAA,CAAMC,aAAa;QAChCf,KAAA,CAAMG,MAAM,GAAGA,MAAA;QAMfM,iBAAA,CAAkB,IAAAF,qBAAA,CAAAU,gBAAe,EAAEH,KAAA,CAAMX,MAAM,GAAG,eAAe,UAAA1B,CAAA;UAC/D,IAAIuB,KAAA,CAAMF,SAAS,IAAIE,KAAA,CAAMG,MAAM,IAAI,CAAC,IAAAI,qBAAA,CAAAW,YAAW,EAAElB,KAAA,CAAMG,MAAM,EAAE1B,CAAA,CAAE0B,MAAM,GACzEgB,eAAA,CAAgB1C,CAAA,EAAGA,CAAA,CAAEC,WAAW;QAEpC,GAAG;UAAC0C,OAAA,EAAS;QAAI;QAEjB,IAAI/B,YAAA,EACFA,YAAA,CAAa;UACXgC,IAAA,EAAM;kBACNlB,MAAA;uBACAzB;QACF;QAGF,IAAIY,aAAA,EACFA,aAAA,CAAc;QAGhBS,UAAA,CAAW;MACb;MAEA,IAAIoB,eAAA,GAAkB,SAAlBA,gBAAmBL,KAAA,EAAOpC,WAAA;QAC5B,IAAIyB,MAAA,GAASH,KAAA,CAAMG,MAAM;QACzBH,KAAA,CAAMtB,WAAW,GAAG;QACpBsB,KAAA,CAAMG,MAAM,GAAG;QAEf,IAAIzB,WAAA,KAAgB,WAAW,CAACsB,KAAA,CAAMF,SAAS,IAAI,CAACK,MAAA,EAClD;QAGFH,KAAA,CAAMF,SAAS,GAAG;QAClBY,wBAAA;QAEA,IAAInB,UAAA,EACFA,UAAA,CAAW;UACT8B,IAAA,EAAM;kBACNlB,MAAA;uBACAzB;QACF;QAGF,IAAIY,aAAA,EACFA,aAAA,CAAc;QAGhBS,UAAA,CAAW;MACb;MAEA,IAAIuB,UAAA,GAA4B,CAAC;MAEjC,IAAI,OAAOzC,YAAA,KAAiB,aAAa;QACvCyC,UAAA,CAAWC,cAAc,GAAG,UAAC9C,CAAA;UAC3B,IAAIL,qDAAA,IAAmCK,CAAA,CAAEC,WAAW,KAAK,SACvD;UAGFmC,iBAAA,CAAkBpC,CAAA,EAAGA,CAAA,CAAEC,WAAW;QACpC;QAEA4C,UAAA,CAAWE,cAAc,GAAG,UAAC/C,CAAA;UAC3B,IAAI,CAACe,UAAA,IAAcf,CAAA,CAAEsC,aAAa,CAACC,QAAQ,CAACvC,CAAA,CAAE0B,MAAM,GAClDgB,eAAA,CAAgB1C,CAAA,EAAGA,CAAA,CAAEC,WAAW;QAEpC;MACF,OAAO,IAAIK,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,QAAQ;QAC1CqC,UAAA,CAAWG,YAAY,GAAG;UACxBzB,KAAA,CAAME,yBAAyB,GAAG;QACpC;QAEAoB,UAAA,CAAWI,YAAY,GAAG,UAACjD,CAAA;UACzB,IAAI,CAACuB,KAAA,CAAME,yBAAyB,IAAI,CAAC9B,qDAAA,EACvCyC,iBAAA,CAAkBpC,CAAA,EAAG;UAGvBuB,KAAA,CAAME,yBAAyB,GAAG;QACpC;QAEAoB,UAAA,CAAWK,YAAY,GAAG,UAAClD,CAAA;UACzB,IAAI,CAACe,UAAA,IAAcf,CAAA,CAAEsC,aAAa,CAACC,QAAQ,CAACvC,CAAA,CAAE0B,MAAM,GAClDgB,eAAA,CAAgB1C,CAAA,EAAG;QAEvB;MACF;MACA,OAAO;oBAAC6C,UAAA;yBAAYH;MAAe;IACrC,GAAG,CAAC9B,YAAA,EAAcC,aAAA,EAAeC,UAAA,EAAYC,UAAA,EAAYQ,KAAA,EAAOS,iBAAA,EAAmBC,wBAAA,CAAyB;IAnGvGY,UAAU,GAAAX,KAAA,CAAXW,UAAA;IAAaH,eAAe,GAAAR,KAAA,CAAjBQ,eAAA;EAqGf,IAAAzB,YAAA,CAAAW,SAAQ,EAAE;IAGR,IAAIb,UAAA,EACF2B,eAAA,CAAgB;MAACJ,aAAA,EAAef,KAAA,CAAMG;IAAM,GAAGH,KAAA,CAAMtB,WAAW;EAGpE,GAAG,CAACc,UAAA,CAAW;EAEf,OAAO;gBACL8B,UAAA;eACAxB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}