{"ast":null,"code":"var $47fa5ec5ff482271$exports = require(\"./context.main.js\");\nvar $fbyBw$internationalizedstring = require(\"@internationalized/string\");\nvar $fbyBw$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useLocalizedStringDictionary\", function () {\n  return $fc53663969a3d00a$export$87b761675e8eaa10;\n});\n$parcel$export(module.exports, \"useLocalizedStringFormatter\", function () {\n  return $fc53663969a3d00a$export$f12b703ca79dfbb1;\n});\nvar $fc53663969a3d00a$var$cache = new WeakMap();\nfunction $fc53663969a3d00a$var$getCachedDictionary(strings) {\n  var dictionary = $fc53663969a3d00a$var$cache.get(strings);\n  if (!dictionary) {\n    dictionary = new (0, $fbyBw$internationalizedstring.LocalizedStringDictionary)(strings);\n    $fc53663969a3d00a$var$cache.set(strings, dictionary);\n  }\n  return dictionary;\n}\nfunction $fc53663969a3d00a$export$87b761675e8eaa10(strings, packageName) {\n  return packageName && (0, $fbyBw$internationalizedstring.LocalizedStringDictionary).getGlobalDictionaryForPackage(packageName) || $fc53663969a3d00a$var$getCachedDictionary(strings);\n}\nfunction $fc53663969a3d00a$export$f12b703ca79dfbb1(strings, packageName) {\n  var _ref = (0, $47fa5ec5ff482271$exports.useLocale)(),\n    locale = _ref.locale;\n  var dictionary = $fc53663969a3d00a$export$87b761675e8eaa10(strings, packageName);\n  return (0, $fbyBw$react.useMemo)(function () {\n    return new (0, $fbyBw$internationalizedstring.LocalizedStringFormatter)(locale, dictionary);\n  }, [locale, dictionary]);\n}","map":{"version":3,"names":["$fc53663969a3d00a$var$cache","WeakMap","$fc53663969a3d00a$var$getCachedDictionary","strings","dictionary","get","$fbyBw$internationalizedstring","LocalizedStringDictionary","set","$fc53663969a3d00a$export$87b761675e8eaa10","packageName","getGlobalDictionaryForPackage","$fc53663969a3d00a$export$f12b703ca79dfbb1","_ref","$47fa5ec5ff482271$exports","useLocale","locale","$fbyBw$react","useMemo","LocalizedStringFormatter"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\i18n\\dist\\packages\\@react-aria\\i18n\\src\\useLocalizedStringFormatter.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {LocalizedString, LocalizedStringDictionary, LocalizedStringFormatter, LocalizedStrings} from '@internationalized/string';\nimport {useLocale} from './context';\nimport {useMemo} from 'react';\n\nconst cache = new WeakMap();\nfunction getCachedDictionary<K extends string, T extends LocalizedString>(strings: LocalizedStrings<K, T>): LocalizedStringDictionary<K, T> {\n  let dictionary = cache.get(strings);\n  if (!dictionary) {\n    dictionary = new LocalizedStringDictionary(strings);\n    cache.set(strings, dictionary);\n  }\n\n  return dictionary;\n}\n\n/**\n * Returns a cached LocalizedStringDictionary for the given strings.\n */\nexport function useLocalizedStringDictionary<K extends string = string, T extends LocalizedString = string>(strings: LocalizedStrings<K, T>, packageName?: string): LocalizedStringDictionary<K, T> {\n  return (packageName && LocalizedStringDictionary.getGlobalDictionaryForPackage(packageName)) || getCachedDictionary(strings);\n}\n\n/**\n * Provides localized string formatting for the current locale. Supports interpolating variables,\n * selecting the correct pluralization, and formatting numbers. Automatically updates when the locale changes.\n * @param strings - A mapping of languages to localized strings by key.\n */\nexport function useLocalizedStringFormatter<K extends string = string, T extends LocalizedString = string>(strings: LocalizedStrings<K, T>, packageName?: string): LocalizedStringFormatter<K, T> {\n  let {locale} = useLocale();\n  let dictionary = useLocalizedStringDictionary(strings, packageName);\n  return useMemo(() => new LocalizedStringFormatter(locale, dictionary), [locale, dictionary]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAgBA,IAAMA,2BAAA,GAAQ,IAAIC,OAAA;AAClB,SAASC,0CAAiEC,OAA+B;EACvG,IAAIC,UAAA,GAAaJ,2BAAA,CAAMK,GAAG,CAACF,OAAA;EAC3B,IAAI,CAACC,UAAA,EAAY;IACfA,UAAA,GAAa,KAAI,GAAAE,8BAAA,CAAAC,yBAAwB,EAAEJ,OAAA;IAC3CH,2BAAA,CAAMQ,GAAG,CAACL,OAAA,EAASC,UAAA;EACrB;EAEA,OAAOA,UAAA;AACT;AAKO,SAASK,0CAA4FN,OAA+B,EAAEO,WAAoB;EAC/J,OAAOA,WAAC,IAAe,IAAAJ,8BAAA,CAAAC,yBAAwB,EAAEI,6BAA6B,CAACD,WAAA,KAAiBR,yCAAA,CAAoBC,OAAA;AACtH;AAOO,SAASS,0CAA2FT,OAA+B,EAAEO,WAAoB;EAC9J,IAAAG,IAAA,GAAe,IAAAC,yBAAA,CAAAC,SAAQ;IAAlBC,MAAM,GAAAH,IAAA,CAAPG,MAAA;EACJ,IAAIZ,UAAA,GAAaK,yCAAA,CAA6BN,OAAA,EAASO,WAAA;EACvD,OAAO,IAAAO,YAAA,CAAAC,OAAM,EAAE;IAAA,OAAM,KAAI,GAAAZ,8BAAA,CAAAa,wBAAuB,EAAEH,MAAA,EAAQZ,UAAA;EAAA,GAAa,CAACY,MAAA,EAAQZ,UAAA,CAAW;AAC7F","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}