{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Overlay = Overlay;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _overlays = require(\"@react-native-aria/overlays\");\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _hooks = require(\"../../../hooks\");\nvar _ExitAnimationContext = require(\"./ExitAnimationContext\");\nfunction Overlay(_ref) {\n  var children = _ref.children,\n    isOpen = _ref.isOpen,\n    _ref$useRNModal = _ref.useRNModal,\n    useRNModal = _ref$useRNModal === void 0 ? false : _ref$useRNModal,\n    _ref$useRNModalOnAndr = _ref.useRNModalOnAndroid,\n    useRNModalOnAndroid = _ref$useRNModalOnAndr === void 0 ? false : _ref$useRNModalOnAndr,\n    _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n    isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n    _ref$animationPreset = _ref.animationPreset,\n    animationPreset = _ref$animationPreset === void 0 ? 'fade' : _ref$animationPreset,\n    onRequestClose = _ref.onRequestClose,\n    style = _ref.style,\n    unmountOnExit = _ref.unmountOnExit;\n  var _React$useState = _react.default.useState(!isOpen),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    exited = _React$useState2[0],\n    setExited = _React$useState2[1];\n  (0, _hooks.useKeyboardDismissable)({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : function () {}\n  });\n  var styleObj = Object.assign({}, style);\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n  if (useRNModal || useRNModalOnAndroid && _reactNative.Platform.OS === 'android') {\n    return _react.default.createElement(_ExitAnimationContext.ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      }\n    }, _react.default.createElement(_reactNative.Modal, {\n      statusBarTranslucent: true,\n      transparent: true,\n      visible: isOpen,\n      onRequestClose: onRequestClose,\n      animationType: animationPreset\n    }, children));\n  }\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n  return (_react.default.createElement(_overlays.OverlayContainer, {\n      style: Object.assign({}, styleObj)\n    }, _react.default.createElement(_ExitAnimationContext.ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      }\n    }, children))\n  );\n}","map":{"version":3,"names":["_overlays","require","_react","_interopRequireDefault","_reactNative","_hooks","_ExitAnimationContext","Overlay","_ref","children","isOpen","_ref$useRNModal","useRNModal","_ref$useRNModalOnAndr","useRNModalOnAndroid","_ref$isKeyboardDismis","isKeyboardDismissable","_ref$animationPreset","animationPreset","onRequestClose","style","unmountOnExit","_React$useState","React","useState","_React$useState2","_slicedToArray2","default","exited","setExited","useKeyboardDismissable","enabled","callback","styleObj","Object","assign","overflow","display","Platform","OS","createElement","ExitAnimationContext","Provider","value","Modal","statusBarTranslucent","transparent","visible","animationType","OverlayContainer"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\native-base\\lib\\module\\components\\primitives\\Overlay\\Overlay.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport type { ViewStyle } from 'react-native';\nimport { Modal, Platform } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\nexport interface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  useRNModal?: boolean;\n  onRequestClose?: any;\n  isKeyboardDismissable?: boolean;\n  animationPreset?: 'fade' | 'slide' | 'none';\n  style?: ViewStyle;\n  unmountOnExit?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModal = false,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {},\n  });\n  const styleObj = { ...style };\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (useRNModal || (useRNModalOnAndroid && Platform.OS === 'android')) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal\n          statusBarTranslucent\n          transparent\n          visible={isOpen}\n          onRequestClose={onRequestClose}\n          animationType={animationPreset}\n        >\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    //@ts-ignore\n    <OverlayContainer style={{ ...styleObj }}>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"],"mappings":";;;;;;AACA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAC,sBAAA,CAAAF,OAAA;AAEA,IAAAG,YAAA,GAAAH,OAAA;AACA,IAAAI,MAAA,GAAAJ,OAAA;AACA,IAAAK,qBAAA,GAAAL,OAAA;AAeO,SAASM,OAATA,CAAAC,IAAA,EAWW;EAAA,IAVhBC,QADsB,GAAAD,IAAA,CACtBC,QADsB;IAEtBC,MAFsB,GAAAF,IAAA,CAEtBE,MAFsB;IAAAC,eAAA,GAAAH,IAAA,CAGtBI,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,KAHS,GAAAA,eAAA;IAAAE,qBAAA,GAAAL,IAAA,CAItBM,mBAAmB;IAAnBA,mBAAmB,GAAAD,qBAAA,cAAG,KAJA,GAAAA,qBAAA;IAAAE,qBAAA,GAAAP,IAAA,CAKtBQ,qBAAqB;IAArBA,qBAAqB,GAAAD,qBAAA,cAAG,IALF,GAAAA,qBAAA;IAAAE,oBAAA,GAAAT,IAAA,CAOtBU,eAAe;IAAfA,eAAe,GAAAD,oBAAA,cAAG,MAPI,GAAAA,oBAAA;IAQtBE,cARsB,GAAAX,IAAA,CAQtBW,cARsB;IAStBC,KATsB,GAAAZ,IAAA,CAStBY,KATsB;IAUtBC,aAAA,GAAAb,IAAA,CAAAa,aAAA;EAEA,IAAAC,eAAA,GAA4BC,cAAK,CAACC,QAAN,CAAe,CAACd,MAAhB,CAA5B;IAAAe,gBAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAL,eAAA;IAAOM,MAAD,GAAAH,gBAAA;IAASI,SAAT,GAAAJ,gBAAA;EAEN,IAAAK,6BAAsB,EAAC;IACrBC,OAAO,EAAErB,MAAM,IAAIM,qBADE;IAErBgB,QAAQ,EAAEb,cAAc,GAAGA,cAAH,GAAoB,YAAM,CAAE;EAF/B,CAAD,CAAtB;EAIA,IAAMc,QAAQ,GAAAC,MAAA,CAAAC,MAAA,KAAQf,KAAA,CAAtB;EACA,IAAIF,eAAe,KAAK,OAAxB,EAAiC;IAC/Be,QAAQ,CAACG,QAAT,GAAoB,QAApB;IACAH,QAAQ,CAACI,OAAT,GAAmB,MAAnB;EACD,CAHD,MAGO;IACLJ,QAAQ,CAACI,OAAT,GAAmBT,MAAM,IAAI,CAAClB,MAAX,GAAoB,MAApB,GAA6B,MAAhD;EACD;EAED,IAAIW,aAAa,IAAI,CAACX,MAAlB,IAA4BkB,MAAhC,EAAwC;IACtC,OAAO,IAAP;EACD;EAED,IAAIhB,UAAU,IAAKE,mBAAmB,IAAIwB,qBAAQ,CAACC,EAAT,KAAgB,SAA1D,EAAsE;IACpE,OACEhB,cAAA,CAAAiB,aAAA,CAACC,0CAAD,CAAsBC,QAAtB;MAA+BC,KAAK,EAAE;QAAEf,MAAF,EAAEA,MAAF;QAAUC,SAAA,EAAAA;MAAV;IAAtC,GACEN,cAAA,CAAAiB,aAAA,CAACI,kBAAD;MACEC,oBAAoB,MADtB;MAEEC,WAAW,MAFb;MAGEC,OAAO,EAAErC,MAHX;MAIES,cAAc,EAAEA,cAJlB;MAKE6B,aAAa,EAAE9B;IALjB,GAOGT,QAPH,CADF,CADF;EAaD;EAED,IAAIY,aAAa,IAAI,CAACX,MAAlB,IAA4BkB,MAAhC,EAAwC;IACtC,OAAO,IAAP;EACD;EAED,QAEEL,cAAA,CAAAiB,aAAA,CAACS,0BAAD;MAAkB7B,KAAK,EAAAc,MAAA,CAAAC,MAAA,KAAOF,QAAA;IAA9B,GACEV,cAAA,CAAAiB,aAAA,CAACC,0CAAD,CAAsBC,QAAtB;MAA+BC,KAAK,EAAE;QAAEf,MAAF,EAAEA,MAAF;QAAUC,SAAA,EAAAA;MAAV;IAAtC,GACGpB,QADH,CADF;EAAA;AAMH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}