{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCheckboxGroupState = useCheckboxGroupState;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _utils = require(\"@react-stately/utils\");\nfunction useCheckboxGroupState(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _useControlledState = (0, _utils.useControlledState)(props.value, props.defaultValue || [], props.onChange),\n    _useControlledState2 = (0, _slicedToArray2.default)(_useControlledState, 2),\n    selectedValues = _useControlledState2[0],\n    _setValue = _useControlledState2[1];\n  var state = {\n    value: selectedValues,\n    setValue: function setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      _setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected: function isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue: function addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      _setValue(function (values) {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n        return values;\n      });\n    },\n    removeValue: function removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      _setValue(function (values) {\n        if (values.includes(value)) {\n          return values.filter(function (existingValue) {\n            return existingValue !== value;\n          });\n        }\n        return values;\n      });\n    },\n    toggleValue: function toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      _setValue(function (values) {\n        if (values.includes(value)) {\n          return values.filter(function (existingValue) {\n            return existingValue !== value;\n          });\n        }\n        return values.concat(value);\n      });\n    }\n  };\n  return state;\n}","map":{"version":3,"names":["useCheckboxGroupState","props","_useControlledState","useControlledState","value","defaultValue","onChange","_useControlledState2","_slicedToArray2","default","selectedValues","setValue","state","isReadOnly","isDisabled","isSelected","includes","addValue","values","concat","removeValue","filter","existingValue","toggleValue"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-stately\\checkbox\\dist\\packages\\@react-stately\\checkbox\\src\\useCheckboxGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n        return values;\n      });\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values;\n      });\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values.concat(value);\n      });\n    }\n  };\n\n  return state;\n}\n"],"mappings":";;;;;;;AA6CO,SAASA,qBAATA,CAA+BC,KAA/B,EAAmF;EAAA,IAApDA,KAAoD;IAApDA,KAAoD,GAAxB,EAAwB;EAAA;EACxF,IAAAC,mBAAA,GAAiC,IAAAC,yBAAkB,EAACF,KAAK,CAACG,KAAP,EAAcH,KAAK,CAACI,YAAN,IAAsB,EAApC,EAAwCJ,KAAK,CAACK,QAA9C,CAAnD;IAAAC,oBAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAP,mBAAA;IAAKQ,cAAD,GAAAH,oBAAA;IAAiBI,SAAjB,GAAAJ,oBAAA;EAEJ,IAAMK,KAAyB,GAAG;IAChCR,KAAK,EAAEM,cADyB;IAEhCC,QAAQ,WAARA,QAAQA,CAACP,KAAD,EAAQ;MACd,IAAIH,KAAK,CAACY,UAAN,IAAoBZ,KAAK,CAACa,UAA9B,EAA0C;QACxC;MACD;MAEDH,SAAQ,CAACP,KAAD,CAAR;IACD,CAR+B;IAShCU,UAAU,EAAEb,KAAK,CAACa,UAAN,IAAoB,KATA;IAUhCD,UAAU,EAAEZ,KAAK,CAACY,UAAN,IAAoB,KAVA;IAWhCE,UAAU,WAAVA,UAAUA,CAACX,KAAD,EAAQ;MAChB,OAAOM,cAAc,CAACM,QAAf,CAAwBZ,KAAxB,CAAP;IACD,CAb+B;IAchCa,QAAQ,WAARA,QAAQA,CAACb,KAAD,EAAQ;MACd,IAAIH,KAAK,CAACY,UAAN,IAAoBZ,KAAK,CAACa,UAA9B,EAA0C;QACxC;MACD;MACDH,SAAQ,CAAC,UAAAO,MAAM,EAAI;QACjB,IAAI,CAACA,MAAM,CAACF,QAAP,CAAgBZ,KAAhB,CAAL,EAA6B;UAC3B,OAAOc,MAAM,CAACC,MAAP,CAAcf,KAAd,CAAP;QACD;QACD,OAAOc,MAAP;MACD,CALO,CAAR;IAMD,CAxB+B;IAyBhCE,WAAW,WAAXA,WAAWA,CAAChB,KAAD,EAAQ;MACjB,IAAIH,KAAK,CAACY,UAAN,IAAoBZ,KAAK,CAACa,UAA9B,EAA0C;QACxC;MACD;MACDH,SAAQ,CAAC,UAAAO,MAAM,EAAI;QACjB,IAAIA,MAAM,CAACF,QAAP,CAAgBZ,KAAhB,CAAJ,EAA4B;UAC1B,OAAOc,MAAM,CAACG,MAAP,CAAc,UAAAC,aAAa;YAAA,OAAIA,aAAa,KAAKlB,KAAjD;UAAA,EAAP;QACD;QACD,OAAOc,MAAP;MACD,CALO,CAAR;IAMD,CAnC+B;IAoChCK,WAAW,WAAXA,WAAWA,CAACnB,KAAD,EAAQ;MACjB,IAAIH,KAAK,CAACY,UAAN,IAAoBZ,KAAK,CAACa,UAA9B,EAA0C;QACxC;MACD;MACDH,SAAQ,CAAC,UAAAO,MAAM,EAAI;QACjB,IAAIA,MAAM,CAACF,QAAP,CAAgBZ,KAAhB,CAAJ,EAA4B;UAC1B,OAAOc,MAAM,CAACG,MAAP,CAAc,UAAAC,aAAa;YAAA,OAAIA,aAAa,KAAKlB,KAAjD;UAAA,EAAP;QACD;QACD,OAAOc,MAAM,CAACC,MAAP,CAAcf,KAAd,CAAP;MACD,CALO,CAAR;IAMD;EA9C+B,CAAlC;EAiDA,OAAOQ,KAAP;AACD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}