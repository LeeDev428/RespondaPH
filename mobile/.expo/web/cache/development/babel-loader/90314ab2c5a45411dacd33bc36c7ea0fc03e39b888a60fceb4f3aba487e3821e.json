{"ast":null,"code":"var $ee0bdf4faa47f2a8$exports = require(\"./utils.main.js\");\nvar $i4XHw$reactariautils = require(\"@react-aria/utils\");\nvar $i4XHw$reactariainteractions = require(\"@react-aria/interactions\");\nvar $i4XHw$reactariafocus = require(\"@react-aria/focus\");\nvar $i4XHw$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useSelectableItem\", function () {\n  return $433b1145b0781e10$export$ecf600387e221c37;\n});\nfunction $433b1145b0781e10$export$ecf600387e221c37(options) {\n  var id = options.id,\n    manager = options.selectionManager,\n    key = options.key,\n    ref = options.ref,\n    shouldSelectOnPressUp = options.shouldSelectOnPressUp,\n    shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n    focus = options.focus,\n    isDisabled = options.isDisabled,\n    onAction = options.onAction,\n    allowsDifferentPressOrigin = options.allowsDifferentPressOrigin,\n    _options$linkBehavior = options.linkBehavior,\n    linkBehavior = _options$linkBehavior === void 0 ? 'action' : _options$linkBehavior;\n  var router = (0, $i4XHw$reactariautils.useRouter)();\n  id = (0, $i4XHw$reactariautils.useId)(id);\n  var onSelect = function onSelect(e) {\n    if (e.pointerType === 'keyboard' && (0, $ee0bdf4faa47f2a8$exports.isNonContiguousSelectionModifier)(e)) manager.toggleSelection(key);else {\n      if (manager.selectionMode === 'none') return;\n      if (manager.isLink(key)) {\n        if (linkBehavior === 'selection' && ref.current) {\n          var _itemProps = manager.getItemProps(key);\n          router.open(ref.current, e, _itemProps.href, _itemProps.routerOptions);\n          manager.setSelectedKeys(manager.selectedKeys);\n          return;\n        } else if (linkBehavior === 'override' || linkBehavior === 'none') return;\n      }\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);\n      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === 'toggle' || e && ((0, $i4XHw$reactariautils.isCtrlKeyPressed)(e) || e.pointerType === 'touch' || e.pointerType === 'virtual')) manager.toggleSelection(key);else manager.replaceSelection(key);\n    }\n  };\n  (0, $i4XHw$react.useEffect)(function () {\n    var isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused) {\n      if (!shouldUseVirtualFocus) {\n        if (focus) focus();else if (document.activeElement !== ref.current && ref.current) (0, $i4XHw$reactariainteractions.focusSafely)(ref.current);\n      } else (0, $i4XHw$reactariafocus.moveVirtualFocus)(ref.current);\n    }\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n  isDisabled = isDisabled || manager.isDisabled(key);\n  var itemProps = {};\n  if (!shouldUseVirtualFocus && !isDisabled) itemProps = {\n    tabIndex: key === manager.focusedKey ? 0 : -1,\n    onFocus: function onFocus(e) {\n      if (e.target === ref.current) manager.setFocusedKey(key);\n    }\n  };else if (isDisabled) itemProps.onMouseDown = function (e) {\n    e.preventDefault();\n  };\n  var isLinkOverride = manager.isLink(key) && linkBehavior === 'override';\n  var isActionOverride = onAction && options['UNSTABLE_itemBehavior'] === 'action';\n  var hasLinkAction = manager.isLink(key) && linkBehavior !== 'selection' && linkBehavior !== 'none';\n  var allowsSelection = !isDisabled && manager.canSelectItem(key) && !isLinkOverride && !isActionOverride;\n  var allowsActions = (onAction || hasLinkAction) && !isDisabled;\n  var hasPrimaryAction = allowsActions && (manager.selectionBehavior === 'replace' ? !allowsSelection : !allowsSelection || manager.isEmpty);\n  var hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  var hasAction = hasPrimaryAction || hasSecondaryAction;\n  var modality = (0, $i4XHw$react.useRef)(null);\n  var longPressEnabled = hasAction && allowsSelection;\n  var longPressEnabledOnPressStart = (0, $i4XHw$react.useRef)(false);\n  var hadPrimaryActionOnPressStart = (0, $i4XHw$react.useRef)(false);\n  var collectionItemProps = manager.getItemProps(key);\n  var performAction = function performAction(e) {\n    if (onAction) {\n      var _ref_current;\n      onAction();\n      (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.dispatchEvent(new CustomEvent('react-aria-item-action', {\n        bubbles: true\n      }));\n    }\n    if (hasLinkAction && ref.current) router.open(ref.current, e, collectionItemProps.href, collectionItemProps.routerOptions);\n  };\n  var itemPressProps = {\n    ref: ref\n  };\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = function (e) {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || $433b1145b0781e10$var$isSelectionKey())) onSelect(e);\n    };\n    if (!allowsDifferentPressOrigin) itemPressProps.onPress = function (e) {\n      if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== 'mouse') {\n        if (e.pointerType === 'keyboard' && !$433b1145b0781e10$var$isActionKey()) return;\n        performAction(e);\n      } else if (e.pointerType !== 'keyboard' && allowsSelection) onSelect(e);\n    };else {\n      itemPressProps.onPressUp = hasPrimaryAction ? undefined : function (e) {\n        if (e.pointerType === 'mouse' && allowsSelection) onSelect(e);\n      };\n      itemPressProps.onPress = hasPrimaryAction ? performAction : function (e) {\n        if (e.pointerType !== 'keyboard' && e.pointerType !== 'mouse' && allowsSelection) onSelect(e);\n      };\n    }\n  } else {\n    itemPressProps.onPressStart = function (e) {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n      if (allowsSelection && (e.pointerType === 'mouse' && !hasPrimaryAction || e.pointerType === 'keyboard' && (!allowsActions || $433b1145b0781e10$var$isSelectionKey()))) onSelect(e);\n    };\n    itemPressProps.onPress = function (e) {\n      if (e.pointerType === 'touch' || e.pointerType === 'pen' || e.pointerType === 'virtual' || e.pointerType === 'keyboard' && hasAction && $433b1145b0781e10$var$isActionKey() || e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current) {\n        if (hasAction) performAction(e);else if (allowsSelection) onSelect(e);\n      }\n    };\n  }\n  itemProps['data-collection'] = (0, $ee0bdf4faa47f2a8$exports.getCollectionId)(manager.collection);\n  itemProps['data-key'] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  if (shouldUseVirtualFocus) itemPressProps = (0, $i4XHw$reactariautils.mergeProps)(itemPressProps, {\n    onPressStart: function onPressStart(e) {\n      if (e.pointerType !== 'touch') {\n        manager.setFocused(true);\n        manager.setFocusedKey(key);\n      }\n    },\n    onPress: function onPress(e) {\n      if (e.pointerType === 'touch') {\n        manager.setFocused(true);\n        manager.setFocusedKey(key);\n      }\n    }\n  });\n  if (collectionItemProps) {\n    for (var _key of ['onPressStart', 'onPressEnd', 'onPressChange', 'onPress', 'onPressUp', 'onClick']) if (collectionItemProps[_key]) itemPressProps[_key] = (0, $i4XHw$reactariautils.chain)(itemPressProps[_key], collectionItemProps[_key]);\n  }\n  var _ref = (0, $i4XHw$reactariainteractions.usePress)(itemPressProps),\n    pressProps = _ref.pressProps,\n    isPressed = _ref.isPressed;\n  var onDoubleClick = hasSecondaryAction ? function (e) {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      performAction(e);\n    }\n  } : undefined;\n  var _ref2 = (0, $i4XHw$reactariainteractions.useLongPress)({\n      isDisabled: !longPressEnabled,\n      onLongPress: function onLongPress(e) {\n        if (e.pointerType === 'touch') {\n          onSelect(e);\n          manager.setSelectionBehavior('toggle');\n        }\n      }\n    }),\n    longPressProps = _ref2.longPressProps;\n  var onDragStartCapture = function onDragStartCapture(e) {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) e.preventDefault();\n  };\n  var onClick = linkBehavior !== 'none' && manager.isLink(key) ? function (e) {\n    if (!(0, $i4XHw$reactariautils.openLink).isOpening) e.preventDefault();\n  } : undefined;\n  return {\n    itemProps: (0, $i4XHw$reactariautils.mergeProps)(itemProps, allowsSelection || hasPrimaryAction || shouldUseVirtualFocus && !isDisabled ? pressProps : {}, longPressEnabled ? longPressProps : {}, {\n      onDoubleClick: onDoubleClick,\n      onDragStartCapture: onDragStartCapture,\n      onClick: onClick,\n      id: id\n    }, shouldUseVirtualFocus ? {\n      onMouseDown: function onMouseDown(e) {\n        return e.preventDefault();\n      }\n    } : undefined),\n    isPressed: isPressed,\n    isSelected: manager.isSelected(key),\n    isFocused: manager.isFocused && manager.focusedKey === key,\n    isDisabled: isDisabled,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nfunction $433b1145b0781e10$var$isActionKey() {\n  var event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === 'Enter';\n}\nfunction $433b1145b0781e10$var$isSelectionKey() {\n  var event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === ' ' || (event === null || event === void 0 ? void 0 : event.code) === 'Space';\n}","map":{"version":3,"names":["$433b1145b0781e10$export$ecf600387e221c37","options","id","manager","selectionManager","key","ref","shouldSelectOnPressUp","shouldUseVirtualFocus","focus","isDisabled","onAction","allowsDifferentPressOrigin","_options$linkBehavior","linkBehavior","router","$i4XHw$reactariautils","useRouter","useId","onSelect","e","pointerType","$ee0bdf4faa47f2a8$exports","isNonContiguousSelectionModifier","toggleSelection","selectionMode","isLink","current","itemProps","getItemProps","open","href","routerOptions","setSelectedKeys","selectedKeys","isSelected","disallowEmptySelection","replaceSelection","shiftKey","extendSelection","selectionBehavior","isCtrlKeyPressed","$i4XHw$react","useEffect","isFocused","focusedKey","document","activeElement","$i4XHw$reactariainteractions","focusSafely","$i4XHw$reactariafocus","moveVirtualFocus","childFocusStrategy","tabIndex","onFocus","target","setFocusedKey","onMouseDown","preventDefault","isLinkOverride","isActionOverride","hasLinkAction","allowsSelection","canSelectItem","allowsActions","hasPrimaryAction","isEmpty","hasSecondaryAction","hasAction","modality","useRef","longPressEnabled","longPressEnabledOnPressStart","hadPrimaryActionOnPressStart","collectionItemProps","performAction","_ref_current","dispatchEvent","CustomEvent","bubbles","itemPressProps","onPressStart","$433b1145b0781e10$var$isSelectionKey","onPress","$433b1145b0781e10$var$isActionKey","onPressUp","undefined","getCollectionId","collection","preventFocusOnPress","mergeProps","setFocused","chain","_ref","usePress","pressProps","isPressed","onDoubleClick","stopPropagation","_ref2","useLongPress","onLongPress","setSelectionBehavior","longPressProps","onDragStartCapture","onClick","openLink","isOpening","event","window","code"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\useSelectableItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {chain, isCtrlKeyPressed, mergeProps, openLink, useId, useRouter} from '@react-aria/utils';\nimport {DOMAttributes, DOMProps, FocusableElement, Key, LongPressEvent, PointerType, PressEvent, RefObject} from '@react-types/shared';\nimport {focusSafely, PressHookProps, useLongPress, usePress} from '@react-aria/interactions';\nimport {getCollectionId, isNonContiguousSelectionModifier} from './utils';\nimport {moveVirtualFocus} from '@react-aria/focus';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useEffect, useRef} from 'react';\n\nexport interface SelectableItemOptions extends DOMProps {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<FocusableElement | null>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether selection requires the pointer/mouse down and up events to occur on the same target or triggers selection on\n   * the target of the pointer/mouse up event.\n   */\n  allowsDifferentPressOrigin?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void,\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * - 'none': links are disabled for both selection and actions (e.g. handled elsewhere).\n   * @default 'action'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override' | 'none'\n}\n\nexport interface SelectableItemStates {\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /** Whether the item is currently focused. */\n  isFocused: boolean,\n  /**\n   * Whether the item is non-interactive, i.e. both selection and actions are disabled and the item may\n   * not be focused. Dependent on `disabledKeys` and `disabledBehavior`.\n   */\n  isDisabled: boolean,\n  /**\n   * Whether the item may be selected, dependent on `selectionMode`, `disabledKeys`, and `disabledBehavior`.\n   */\n  allowsSelection: boolean,\n  /**\n   * Whether the item has an action, dependent on `onAction`, `disabledKeys`,\n   * and `disabledBehavior`. It may also change depending on the current selection state\n   * of the list (e.g. when selection is primary). This can be used to enable or disable hover\n   * styles or other visual indications of interactivity.\n   */\n  hasAction: boolean\n}\n\nexport interface SelectableItemAria extends SelectableItemStates {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: DOMAttributes\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    id,\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction,\n    allowsDifferentPressOrigin,\n    linkBehavior = 'action'\n  } = options;\n  let router = useRouter();\n  id = useId(id);\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.isLink(key)) {\n        if (linkBehavior === 'selection' && ref.current) {\n          let itemProps = manager.getItemProps(key);\n          router.open(ref.current, e, itemProps.href, itemProps.routerOptions);\n          // Always set selected keys back to what they were so that select and combobox close.\n          manager.setSelectedKeys(manager.selectedKeys);\n          return;\n        } else if (linkBehavior === 'override' || linkBehavior === 'none') {\n          return;\n        }\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  // TODO: can't make this useLayoutEffect bacause it breaks menus inside dialogs\n  // However, if this is a useEffect, it runs twice and dispatches two blur events and immediately sets\n  // aria-activeDescendant in useAutocomplete... I've worked around this for now\n  useEffect(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused) {\n      if (!shouldUseVirtualFocus) {\n        if (focus) {\n          focus();\n        } else if (document.activeElement !== ref.current && ref.current) {\n          focusSafely(ref.current);\n        }\n      } else {\n        moveVirtualFocus(ref.current);\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  isDisabled = isDisabled || manager.isDisabled(key);\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus && !isDisabled) {\n    itemProps = {\n      tabIndex: key === manager.focusedKey ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  } else if (isDisabled) {\n    itemProps.onMouseDown = (e) => {\n      // Prevent focus going to the body when clicking on a disabled item.\n      e.preventDefault();\n    };\n  }\n\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  let isLinkOverride = manager.isLink(key) && linkBehavior === 'override';\n  let isActionOverride = onAction && options['UNSTABLE_itemBehavior'] === 'action';\n  let hasLinkAction = manager.isLink(key) && linkBehavior !== 'selection' && linkBehavior !== 'none';\n  let allowsSelection = !isDisabled && manager.canSelectItem(key) && !isLinkOverride && !isActionOverride;\n  let allowsActions = (onAction || hasLinkAction) && !isDisabled;\n  let hasPrimaryAction = allowsActions && (\n    manager.selectionBehavior === 'replace'\n      ? !allowsSelection\n      : !allowsSelection || manager.isEmpty\n  );\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = useRef<PointerType | null>(null);\n\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = useRef(false);\n  let hadPrimaryActionOnPressStart = useRef(false);\n  let collectionItemProps = manager.getItemProps(key);\n\n  let performAction = (e) => {\n    if (onAction) {\n      onAction();\n      ref.current?.dispatchEvent(new CustomEvent('react-aria-item-action', {bubbles: true}));\n    }\n\n    if (hasLinkAction && ref.current) {\n      router.open(ref.current, e, collectionItemProps.href, collectionItemProps.routerOptions);\n    }\n  };\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressHookProps = {ref};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || isSelectionKey())) {\n        onSelect(e);\n      }\n    };\n\n    // If allowsDifferentPressOrigin and interacting with mouse, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) {\n      itemPressProps.onPress = (e) => {\n        if (hasPrimaryAction || (hasSecondaryAction && e.pointerType !== 'mouse')) {\n          if (e.pointerType === 'keyboard' && !isActionKey()) {\n            return;\n          }\n\n          performAction(e);\n        } else if (e.pointerType !== 'keyboard' && allowsSelection) {\n          onSelect(e);\n        }\n      };\n    } else {\n      itemPressProps.onPressUp = hasPrimaryAction ? undefined : (e) => {\n        if (e.pointerType === 'mouse' && allowsSelection) {\n          onSelect(e);\n        }\n      };\n\n      itemPressProps.onPress = hasPrimaryAction ? performAction : (e) => {\n        if (e.pointerType !== 'keyboard' && e.pointerType !== 'mouse' && allowsSelection) {\n          onSelect(e);\n        }\n      };\n    }\n  } else {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (\n        allowsSelection && (\n          (e.pointerType === 'mouse' && !hasPrimaryAction) ||\n          (e.pointerType === 'keyboard' && (!allowsActions || isSelectionKey()))\n        )\n      ) {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (\n        e.pointerType === 'touch' ||\n        e.pointerType === 'pen' ||\n        e.pointerType === 'virtual' ||\n        (e.pointerType === 'keyboard' && hasAction && isActionKey()) ||\n        (e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current)\n      ) {\n        if (hasAction) {\n          performAction(e);\n        } else if (allowsSelection) {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  itemProps['data-collection'] = getCollectionId(manager.collection);\n  itemProps['data-key'] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n\n  // When using virtual focus, make sure the focused key gets updated on press.\n  if (shouldUseVirtualFocus) {\n    itemPressProps = mergeProps(itemPressProps, {\n      onPressStart(e) {\n        if (e.pointerType !== 'touch') {\n          manager.setFocused(true);\n          manager.setFocusedKey(key);\n        }\n      },\n      onPress(e) {\n        if (e.pointerType === 'touch') {\n          manager.setFocused(true);\n          manager.setFocusedKey(key);\n        }\n      }\n    });\n  }\n\n  if (collectionItemProps) {\n    for (let key of ['onPressStart', 'onPressEnd', 'onPressChange', 'onPress', 'onPressUp', 'onClick']) {\n      if (collectionItemProps[key]) {\n        itemPressProps[key] = chain(itemPressProps[key], collectionItemProps[key]);\n      }\n    }\n  }\n\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      performAction(e);\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {longPressProps} = useLongPress({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) {\n      e.preventDefault();\n    }\n  };\n\n  // Prevent default on link clicks so that we control exactly\n  // when they open (to match selection behavior).\n  let onClick = linkBehavior !== 'none' && manager.isLink(key) ? e => {\n    if (!(openLink as any).isOpening) {\n      e.preventDefault();\n    }\n  } : undefined;\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction || (shouldUseVirtualFocus && !isDisabled) ? pressProps : {},\n      longPressEnabled ? longPressProps : {},\n      {onDoubleClick, onDragStartCapture, onClick, id},\n      // Prevent DOM focus from moving on mouse down when using virtual focus\n      shouldUseVirtualFocus ? {onMouseDown: e => e.preventDefault()} : undefined\n    ),\n    isPressed,\n    isSelected: manager.isSelected(key),\n    isFocused: manager.isFocused && manager.focusedKey === key,\n    isDisabled,\n    allowsSelection,\n    hasAction\n  };\n}\n\nfunction isActionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === 'Enter';\n}\n\nfunction isSelectionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === ' ' || event?.code === 'Space';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}