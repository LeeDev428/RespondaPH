{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateProps = calculateProps;\nexports.extractPropertyFromFunction = void 0;\nexports.extractProps = extractProps;\nexports.mergeUnderscoreProps = mergeUnderscoreProps;\nexports.resolveValueWithBreakpoint = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _objectDestructuringEmpty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectDestructuringEmpty\"));\nvar _lodash = _interopRequireDefault(require(\"lodash.get\"));\nvar _lodash2 = _interopRequireDefault(require(\"lodash.isnil\"));\nvar _lodash3 = _interopRequireDefault(require(\"lodash.mergewith\"));\nvar _lodash4 = _interopRequireDefault(require(\"lodash.clonedeep\"));\nvar _base = require(\"./../../theme/base\");\nvar _tools = require(\"./../../theme/tools\");\nvar _useContrastText = require(\"../useContrastText\");\nfunction extractProps(props, theme, _ref, componentTheme, currentBreakpoint) {\n  (0, _objectDestructuringEmpty2.default)(_ref);\n  var newProps = {};\n  for (var property in props) {\n    if (_base.themePropertyMap[property]) {\n      var propValues = extractPropertyFromFunction(property, props, theme, componentTheme);\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!(0, _lodash2.default)(propValues)) {\n        for (var nestedProp in propValues) {\n          newProps[nestedProp] = (0, _lodash.default)(theme, \"\".concat(_base.themePropertyMap[nestedProp], \".\").concat(propValues[nestedProp]), propValues[nestedProp]);\n        }\n      } else if (property === 'shadow') {\n        var shadowProps = theme[_base.themePropertyMap[property]][props[property]];\n        if (!(0, _lodash2.default)(shadowProps)) {\n          newProps = Object.assign({}, newProps, shadowProps);\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(props[property], theme.breakpoints, currentBreakpoint, property);\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(props[property], theme.breakpoints, currentBreakpoint, property);\n    }\n  }\n  return (0, _lodash4.default)(newProps);\n}\nfunction filterDefaultProps(props, defaultProps) {\n  var _extractInObject = (0, _tools.extractInObject)(defaultProps, Object.keys(props)),\n    _extractInObject2 = (0, _slicedToArray2.default)(_extractInObject, 2),\n    resultProps = _extractInObject2[1];\n  return resultProps;\n}\nvar extractPropertyFromFunction = exports.extractPropertyFromFunction = function extractPropertyFromFunction(property, props, theme, componentTheme) {\n  var propValues;\n  if (componentTheme && typeof componentTheme[_base.themePropertyMap[property]] === 'function') {\n    var funcProps = componentTheme[_base.themePropertyMap[property]](Object.assign({\n      theme: theme\n    }, props));\n    var isNested = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    propValues = isNested ? Object.assign({}, (0, _lodash.default)(funcProps, \"\".concat(props[property]))) : Object.assign({}, funcProps);\n  } else {\n    propValues = (0, _lodash.default)(componentTheme, \"\".concat(_base.themePropertyMap[property], \".\").concat(props[property]));\n  }\n  return propValues;\n};\nfunction mergeUnderscoreProps(newProps, props) {\n  var _props = Object.keys(newProps).filter(function (propName) {\n    return propName.startsWith('_');\n  });\n  _props.forEach(function (propName) {\n    var _newProps$bg, _newProps$propName$co, _newProps$propName, _props$propName;\n    var bg = (_newProps$bg = newProps.bg) !== null && _newProps$bg !== void 0 ? _newProps$bg : newProps.backgroundColor;\n    var textColor = bg ? {\n      color: (0, _useContrastText.useContrastText)(bg, (_newProps$propName$co = (_newProps$propName = newProps[propName]) === null || _newProps$propName === void 0 ? void 0 : _newProps$propName.color) !== null && _newProps$propName$co !== void 0 ? _newProps$propName$co : (_props$propName = props[propName]) === null || _props$propName === void 0 ? void 0 : _props$propName.color)\n    } : {};\n    newProps[propName] = Object.assign({}, textColor, newProps[propName], props[propName]);\n  });\n  return newProps;\n}\nvar resolveValueWithBreakpoint = exports.resolveValueWithBreakpoint = function resolveValueWithBreakpoint(values, breakpointTheme, currentBreakpoint, property) {\n  if ((0, _tools.hasValidBreakpointFormat)(values, breakpointTheme, property)) {\n    return (0, _tools.findLastValidBreakpoint)(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\nfunction calculateProps(theme, colorModeProps, componentTheme, props, windowWidth) {\n  var currentBreakpoint = (0, _tools.getClosestBreakpoint)(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n  var newProps;\n  if (componentTheme) {\n    newProps = extractProps(filterDefaultProps(props, componentTheme.defaultProps), theme, colorModeProps, componentTheme, currentBreakpoint);\n    var componentBaseStyle = typeof componentTheme.baseStyle !== 'function' ? componentTheme.baseStyle : componentTheme.baseStyle(Object.assign({\n      theme: theme\n    }, newProps, props, colorModeProps));\n    newProps = (0, _lodash3.default)(newProps, componentBaseStyle, function (objValue, srcValue, key) {\n      if (!(0, _lodash2.default)(objValue)) {\n        delete newProps[key];\n      }\n    });\n    var variant = props.variant || (0, _lodash.default)(componentTheme, 'defaultProps.variant');\n    if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n      var colorScheme = props.colorScheme || (0, _lodash.default)(componentTheme, 'defaultProps.colorScheme');\n      var variantProps = componentTheme.variants[variant](Object.assign({}, props, newProps, {\n        colorScheme: colorScheme,\n        theme: theme\n      }, colorModeProps));\n      variantProps = extractProps(variantProps, theme, colorModeProps, componentTheme, currentBreakpoint);\n      newProps = (0, _lodash3.default)(newProps, variantProps, function (objValue, srcValue, key) {\n        if (!(0, _lodash2.default)(objValue)) {\n          delete newProps[key];\n        }\n      });\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  var extractedProps = extractProps(props, theme, colorModeProps, componentTheme, currentBreakpoint);\n  newProps = (0, _lodash3.default)(newProps, extractedProps, function (objValue, srcValue, key) {\n    if (!(0, _lodash2.default)(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}","map":{"version":3,"names":["_lodash","_interopRequireDefault","require","_lodash2","_lodash3","_lodash4","_base","_tools","_useContrastText","extractProps","props","theme","_ref","componentTheme","currentBreakpoint","_objectDestructuringEmpty2","default","newProps","property","themePropertyMap","propValues","extractPropertyFromFunction","isNil","nestedProp","get","concat","shadowProps","Object","assign","resolveValueWithBreakpoint","breakpoints","cloneDeep","filterDefaultProps","defaultProps","_extractInObject","extractInObject","keys","_extractInObject2","_slicedToArray2","resultProps","exports","funcProps","isNested","some","key","mergeUnderscoreProps","_props","filter","propName","startsWith","forEach","_newProps$bg","_newProps$propName$co","_newProps$propName","_props$propName","bg","backgroundColor","textColor","color","useContrastText","values","breakpointTheme","hasValidBreakpointFormat","findLastValidBreakpoint","calculateProps","colorModeProps","windowWidth","getClosestBreakpoint","componentBaseStyle","baseStyle","mergeWith","objValue","srcValue","variant","variants","colorScheme","variantProps","extractedProps"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\native-base\\lib\\module\\hooks\\useThemeProps\\utils.ts"],"sourcesContent":["import get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from './../../theme/base';\nimport {\n  getClosestBreakpoint,\n  findLastValidBreakpoint,\n  hasValidBreakpointFormat,\n  extractInObject,\n} from './../../theme/tools';\nimport { useContrastText } from '../useContrastText';\n\n/*\n Extract props from theme props and omit those from props\n*/\n/**\n *\n * @param props Props passed by the user\n * @param theme Theme object\n * @param colorModeProps `colorMode` object\n * @param componentTheme Theme for specific components\n * @param currentBreakpoint Current breakpoint values\n * @returns Extracting props from defaultProps while overriding the props that are already present\n */\nexport function extractProps(\n  props: any,\n  theme: any,\n  {},\n  componentTheme: any,\n  currentBreakpoint: number\n) {\n  let newProps: any = {};\n  for (let property in props) {\n    // If the property exists in themePropertyMap then get its value\n    if (themePropertyMap[property]) {\n      let propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (let nestedProp in propValues) {\n          newProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n      } else if (property === 'shadow') {\n        let shadowProps = theme[themePropertyMap[property]][props[property]];\n        if (!isNil(shadowProps)) {\n          newProps = { ...newProps, ...shadowProps };\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          theme.breakpoints,\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        theme.breakpoints,\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n  return cloneDeep(newProps);\n}\n\n/*\nRemove props from defaultProps that are already present in props\n*/\nfunction filterDefaultProps(props: any, defaultProps: any) {\n  let [, resultProps] = extractInObject(defaultProps, Object.keys(props));\n  return resultProps;\n}\n\n/**\n * If property is functional in componentTheme, get its returned object\n *\n * @param property : name of the prop\n * @param props : all props\n * @param theme : provided theme without components\n * @param componentTheme : component specific theme\n * @returns\n */\nexport const extractPropertyFromFunction = (\n  property: string,\n  props: any,\n  theme: any,\n  componentTheme: any\n) => {\n  let propValues;\n  // Check if the entry in the theme is a function then calling it with all theme and props as params\n  if (\n    componentTheme &&\n    typeof componentTheme[themePropertyMap[property]] === 'function'\n  ) {\n    let funcProps = componentTheme[themePropertyMap[property]]({\n      theme,\n      ...props,\n    });\n    // Check if returned object from componentTheme is a nested object\n    let isNested: boolean = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    // If the returned value is nested object then find the property value in it, otherwise return the whole object\n    propValues = isNested\n      ? { ...get(funcProps, `${props[property]}`) }\n      : { ...funcProps };\n  } else {\n    // If the entry is any value other than function then return the whole object or value\n    propValues = get(\n      componentTheme,\n      `${themePropertyMap[property]}.${props[property]}`\n    );\n  }\n  return propValues;\n};\n\n/*\nMerge _props and apply contrastText color if not passed by theme or user\n*/\nexport function mergeUnderscoreProps(newProps: any, props: any) {\n  const _props = Object.keys(newProps).filter((propName) =>\n    propName.startsWith('_')\n  );\n  _props.forEach((propName: string) => {\n    // Adding color based on bg contrast if no color is given\n    const bg = newProps.bg ?? newProps.backgroundColor;\n    const textColor = bg\n      ? {\n          color: useContrastText(\n            bg,\n            newProps[propName]?.color ?? props[propName]?.color\n          ),\n        }\n      : {};\n    // Overriding calculated props with user added props\n    newProps[propName] = {\n      ...textColor,\n      ...newProps[propName],\n      ...props[propName],\n    };\n  });\n  return newProps;\n}\n\n/**\n *\n * Checks the property and resolves it if it has breakpoints\n * @param values : value from props\n * @param currentBreakpoint : current value for which breakpoint will be calculated\n * @param property : property name\n * @returns\n */\nexport const resolveValueWithBreakpoint = (\n  values: any,\n  breakpointTheme: any,\n  currentBreakpoint: number,\n  property: any\n) => {\n  if (hasValidBreakpointFormat(values, breakpointTheme, property)) {\n    // Check the last valid breakpoint value from all values\n    // If current breakpoint is `md` and we have `base` then `lg`, then last value will be taken(`base` in this case)\n    return findLastValidBreakpoint(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\n\n/**\n * Takes all prop related data and returns the props that needs to be applied to the component\n *\n * @param theme Theme object\n * @param colorModeProps Color mode information\n * @param componentTheme Theme object for the specific component\n * @param props Props passed by the user\n * @param windowWidth Width of the current window\n * @returns props to be applied\n */\nexport function calculateProps(\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  props: any,\n  windowWidth: any\n) {\n  let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n\n  let newProps: any;\n  if (componentTheme) {\n    // Extracting props from defaultProps\n    newProps = extractProps(\n      filterDefaultProps(props, componentTheme.defaultProps),\n      theme,\n      colorModeProps,\n      componentTheme,\n      currentBreakpoint\n    );\n    // Extracting props from base style\n    let componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...newProps,\n            ...props,\n            ...colorModeProps,\n          });\n    newProps = mergeWith(\n      newProps,\n      componentBaseStyle,\n      // @ts-ignore\n      (objValue, srcValue, key) => {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      }\n    );\n\n    const variant =\n      props.variant || get(componentTheme, 'defaultProps.variant');\n    // Extracting props from variant\n    if (\n      variant &&\n      componentTheme.variants &&\n      componentTheme.variants[variant]\n    ) {\n      const colorScheme =\n        props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      let variantProps = componentTheme.variants[variant]({\n        ...props,\n        ...newProps,\n        colorScheme,\n        theme,\n        ...colorModeProps,\n      });\n      variantProps = extractProps(\n        variantProps,\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint\n      );\n      // added this to handle order of props\n      newProps = mergeWith(\n        newProps,\n        variantProps,\n        // @ts-ignore\n        (objValue, srcValue, key) => {\n          if (!isNil(objValue)) {\n            delete newProps[key];\n          }\n        }\n      );\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  // Extracting props from normal props\n  let extractedProps = extractProps(\n    props,\n    theme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint\n  );\n  // added this to handle order of props\n  // @ts-ignore\n  newProps = mergeWith(newProps, extractedProps, (objValue, srcValue, key) => {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}