{"ast":null,"code":"var $1254e5bb94ac8761$exports = require(\"./useEffectEvent.main.js\");\nvar $8UjJN$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useEvent\", function () {\n  return $2a8c0bb1629926c8$export$90fc3a17d93f704c;\n});\nfunction $2a8c0bb1629926c8$export$90fc3a17d93f704c(ref, event, handler, options) {\n  var handleEvent = (0, $1254e5bb94ac8761$exports.useEffectEvent)(handler);\n  var isDisabled = handler == null;\n  (0, $8UjJN$react.useEffect)(function () {\n    if (isDisabled || !ref.current) return;\n    var element = ref.current;\n    element.addEventListener(event, handleEvent, options);\n    return function () {\n      element.removeEventListener(event, handleEvent, options);\n    };\n  }, [ref, event, options, isDisabled, handleEvent]);\n}","map":{"version":3,"names":["$2a8c0bb1629926c8$export$90fc3a17d93f704c","ref","event","handler","options","handleEvent","$1254e5bb94ac8761$exports","useEffectEvent","isDisabled","$8UjJN$react","useEffect","current","element","addEventListener","removeEventListener"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\utils\\dist\\packages\\@react-aria\\utils\\src\\useEvent.ts"],"sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject} from '@react-types/shared';\nimport {useEffect} from 'react';\nimport {useEffectEvent} from './useEffectEvent';\n\nexport function useEvent<K extends keyof GlobalEventHandlersEventMap>(\n  ref: RefObject<EventTarget | null>,\n  event: K | (string & {}),\n  handler?: (this: Document, ev: GlobalEventHandlersEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions\n): void {\n  let handleEvent = useEffectEvent(handler);\n  let isDisabled = handler == null;\n\n  useEffect(() => {\n    if (isDisabled || !ref.current) {\n      return;\n    }\n\n    let element = ref.current;\n    element.addEventListener(event, handleEvent as EventListener, options);\n    return () => {\n      element.removeEventListener(event, handleEvent as EventListener, options);\n    };\n  }, [ref, event, options, isDisabled, handleEvent]);\n}\n"],"mappings":";;;;;;;;;;;;;AAgBO,SAASA,0CACdC,GAAkC,EAClCC,KAAwB,EACxBC,OAAqE,EACrEC,OAA2C;EAE3C,IAAIC,WAAA,GAAc,IAAAC,yBAAA,CAAAC,cAAa,EAAEJ,OAAA;EACjC,IAAIK,UAAA,GAAaL,OAAA,IAAW;EAE5B,IAAAM,YAAA,CAAAC,SAAQ,EAAE;IACR,IAAIF,UAAA,IAAc,CAACP,GAAA,CAAIU,OAAO,EAC5B;IAGF,IAAIC,OAAA,GAAUX,GAAA,CAAIU,OAAO;IACzBC,OAAA,CAAQC,gBAAgB,CAACX,KAAA,EAAOG,WAAA,EAA8BD,OAAA;IAC9D,OAAO;MACLQ,OAAA,CAAQE,mBAAmB,CAACZ,KAAA,EAAOG,WAAA,EAA8BD,OAAA;IACnE;EACF,GAAG,CAACH,GAAA,EAAKC,KAAA,EAAOE,OAAA,EAASI,UAAA,EAAYH,WAAA,CAAY;AACnD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}