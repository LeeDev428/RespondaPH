{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeBaseProvider = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\nvar _utils = require(\"@react-native-aria/utils\");\nvar _theme = require(\"./../theme\");\nvar _HybridProvider = _interopRequireDefault(require(\"./hybrid-overlay/HybridProvider\"));\nvar _overlays = require(\"@react-native-aria/overlays\");\nvar _Toast = require(\"../components/composites/Toast\");\nvar _NativeBaseContext = require(\"./NativeBaseContext\");\nvar _reactNative = require(\"react-native\");\nvar _utils2 = require(\"../theme/tools/utils\");\nvar _useResponsiveQuery = require(\"../utils/useResponsiveQuery\");\nvar defaultInitialWindowMetricsBasedOnPlatform = _reactNative.Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: _reactNativeSafeAreaContext.initialWindowMetrics\n});\nvar NativeBaseProvider = exports.NativeBaseProvider = function NativeBaseProvider(props) {\n  var _config$theme, _useWindowDimensions;\n  var colorModeManager = props.colorModeManager,\n    _props$config = props.config,\n    config = _props$config === void 0 ? _NativeBaseContext.defaultConfig : _props$config,\n    children = props.children,\n    _props$theme = props.theme,\n    propsTheme = _props$theme === void 0 ? _theme.theme : _props$theme,\n    initialWindowMetrics = props.initialWindowMetrics,\n    isSSR = props.isSSR,\n    disableContrastText = props.disableContrastText;\n  var theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n  var newTheme = _react.default.useMemo(function () {\n    if (config.enableRem) {\n      return (0, _utils2.platformSpecificSpaceUnits)(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n  var windowWidth = (_useWindowDimensions = (0, _reactNative.useWindowDimensions)()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  var currentBreakpoint = _react.default.useMemo(function () {\n    return (0, _utils2.getClosestBreakpoint)(newTheme.breakpoints, windowWidth);\n  }, [windowWidth, newTheme.breakpoints]);\n  return _react.default.createElement(_NativeBaseContext.NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, _react.default.createElement(_useResponsiveQuery.ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, _react.default.createElement(_HybridProvider.default, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, _react.default.createElement(_overlays.OverlayProvider, {\n    isSSR: true\n  }, _react.default.createElement(_Toast.ToastProvider, null, _react.default.createElement(InitializeToastRef, null), _react.default.createElement(_utils.SSRProvider, null, children)))))));\n};\nvar InitializeToastRef = function InitializeToastRef() {\n  var toast = (0, _Toast.useToast)();\n  _Toast.ToastRef.current = toast;\n  return null;\n};","map":{"version":3,"names":["_react","_interopRequireDefault","require","_reactNativeSafeAreaContext","_utils","_theme","_HybridProvider","_overlays","_Toast","_NativeBaseContext","_reactNative","_utils2","_useResponsiveQuery","defaultInitialWindowMetricsBasedOnPlatform","Platform","select","web","frame","x","y","width","height","insets","top","left","right","bottom","default","defaultInitialWindowMetrics","NativeBaseProvider","exports","props","_config$theme","_useWindowDimensions","colorModeManager","_props$config","config","defaultConfig","children","_props$theme","theme","propsTheme","defaultTheme","initialWindowMetrics","isSSR","disableContrastText","newTheme","React","useMemo","enableRem","platformSpecificSpaceUnits","windowWidth","useWindowDimensions","currentBreakpoint","getClosestBreakpoint","breakpoints","createElement","NativeBaseConfigProvider","SafeAreaProvider","initialMetrics","ResponsiveQueryProvider","disableCSSMediaQueries","HybridProvider","options","OverlayProvider","ToastProvider","InitializeToastRef","SSRProvider","toast","useToast","ToastRef","current"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\native-base\\lib\\module\\core\\NativeBaseProvider.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  disableContrastText?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <NativeBaseConfigProvider\n      theme={newTheme}\n      config={config}\n      currentBreakpoint={currentBreakpoint}\n      isSSR={isSSR}\n      disableContrastText={disableContrastText}\n    >\n      <SafeAreaProvider\n        initialMetrics={\n          initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n        }\n      >\n        <ResponsiveQueryProvider disableCSSMediaQueries={!isSSR}>\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider isSSR>\n              <ToastProvider>\n                <InitializeToastRef />\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </ResponsiveQueryProvider>\n      </SafeAreaProvider>\n    </NativeBaseConfigProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"],"mappings":";;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,2BAAA,GAAAD,OAAA;AAKA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AAEA,IAAAI,eAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,SAAA,GAAAL,OAAA;AACA,IAAAM,MAAA,GAAAN,OAAA;AACA,IAAAO,kBAAA,GAAAP,OAAA;AAMA,IAAAQ,YAAA,GAAAR,OAAA;AACA,IAAAS,OAAA,GAAAT,OAAA;AAIA,IAAAU,mBAAA,GAAAV,OAAA;AAKA,IAAMW,0CAA0D,GAAGC,qBAAQ,CAACC,MAAT,CACjE;EACEC,GAAG,EAAE;IACHC,KAAK,EAAE;MAAEC,CAAC,EAAE,CAAL;MAAQC,CAAC,EAAE,CAAX;MAAcC,KAAK,EAAE,CAArB;MAAwBC,MAAM,EAAE;IAAhC,CADJ;IAEHC,MAAM,EAAE;MAAEC,GAAG,EAAE,CAAP;MAAUC,IAAI,EAAE,CAAhB;MAAmBC,KAAK,EAAE,CAA1B;MAA6BC,MAAM,EAAE;IAArC;EAFL,CADP;EAKEC,OAAO,EAAEC;AALX,CADiE,CAAnE;AAqBA,IAAMC,kBAAkB,GAAAC,OAAA,CAAAD,kBAAA,GAAI,SAAtBA,kBAAkBA,CAAIE,KAAD,EAAoC;EAAA,IAAAC,aAAA,EAAAC,oBAAA;EAC7D,IACEC,gBADI,GAQFH,KARJ,CACEG,gBADI;IAAAC,aAAA,GAQFJ,KARJ,CAEEK,MAAM;IAANA,MAAM,GAAAD,aAAA,cAAGE,gCAFL,GAAAF,aAAA;IAGJG,QAHI,GAQFP,KARJ,CAGEO,QAHI;IAAAC,YAAA,GAQFR,KARJ,CAIES,KAAK;IAAEC,UAAU,GAAAF,YAAA,cAAGG,YAJhB,GAAAH,YAAA;IAKJI,oBALI,GAQFZ,KARJ,CAKEY,oBALI;IAMJC,KANI,GAQFb,KARJ,CAMEa,KANI;IAOJC,mBAAA,GACEd,KARJ,CAOEc,mBAAA;EAEF,IAAML,KAAK,IAAAR,aAAA,GAAGI,MAAM,CAACI,KAAV,cAAAR,aAAA,cAAAA,aAAA,GAAmBS,UAA9B;EAEA,IAAMK,QAAQ,GAAGC,cAAK,CAACC,OAAN,CAAc,YAAM;IACnC,IAAIZ,MAAM,CAACa,SAAX,EAAsB;MACpB,OAAO,IAAAC,kCAA0B,EAACV,KAAD,CAAjC;IACD;IACD,OAAOA,KAAP;EACD,CALgB,EAKd,CAACJ,MAAM,CAACa,SAAR,EAAmBT,KAAnB,CALc,CAAjB;EAOA,IAAMW,WAAW,IAAAlB,oBAAA,GAAG,IAAAmB,gCAAmB,GAAtB,cAAAnB,oBAAA,uBAAGA,oBAAA,CAAuBb,KAA3C;EAEA,IAAMiC,iBAAiB,GAAGN,cAAK,CAACC,OAAN,CACxB;IAAA,OAAM,IAAAM,4BAAoB,EAACR,QAAQ,CAACS,WAAV,EAAuBJ,WAAvB,CADF;EAAA,GAExB,CAACA,WAAD,EAAcL,QAAQ,CAACS,WAAvB,CAFwB,CAA1B;EAKA,OACER,cAAA,CAAAS,aAAA,CAACC,2CAAD;IACEjB,KAAK,EAAEM,QADT;IAEEV,MAAM,EAAEA,MAFV;IAGEiB,iBAAiB,EAAEA,iBAHrB;IAIET,KAAK,EAAEA,KAJT;IAKEC,mBAAmB,EAAEA;EALvB,GAOEE,cAAA,CAAAS,aAAA,CAACE,4CAAD;IACEC,cAAc,EACZhB,oBADY,aACZA,oBADY,cACZA,oBADY,GACY9B;EAF5B,GAKEkC,cAAA,CAAAS,aAAA,CAACI,2CAAD;IAAyBC,sBAAsB,EAAE,CAACjB;EAAlD,GACEG,cAAA,CAAAS,aAAA,CAACM,uBAAD;IACE5B,gBAAgB,EAAEA,gBADpB;IAEE6B,OAAO,EAAEvB,KAAK,CAACJ;EAFjB,GAIEW,cAAA,CAAAS,aAAA,CAACQ,yBAAD;IAAiBpB,KAAK;EAAtB,GACEG,cAAA,CAAAS,aAAA,CAACS,oBAAD,QACElB,cAAA,CAAAS,aAAA,CAACU,kBAAD,OADF,EAEEnB,cAAA,CAAAS,aAAA,CAACW,kBAAD,QAAc7B,QAAd,CAFF,CADF,CAJF,CADF,CALF,CAPF,CADF;AA6BD,CAvDD;AAyDA,IAAM4B,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;EAC/B,IAAME,KAAK,GAAG,IAAAC,eAAQ,GAAtB;EACAC,eAAQ,CAACC,OAAT,GAAmBH,KAAnB;EACA,OAAO,IAAP;AACD,CAJD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}