{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAccessibleColors = useAccessibleColors;\nexports.useColorMode = exports.useAppState = void 0;\nexports.useColorModeValue = useColorModeValue;\nexports.useColorScheme = void 0;\nexports.useModeManager = useModeManager;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _Context = require(\"./../hybrid-overlay/Context\");\nvar _reactNative = require(\"react-native\");\nvar _shim = require(\"use-sync-external-store/shim\");\nvar _NativeBaseContext = require(\"../NativeBaseContext\");\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nvar useColorMode = exports.useColorMode = function useColorMode() {\n  var _React$useContext = _react.default.useContext(_Context.HybridContext),\n    colorModeContext = _React$useContext.colorMode;\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n    colorMode = _useColorMode.colorMode;\n  return colorMode === 'dark' ? dark : light;\n}\nvar useAppState = exports.useAppState = function useAppState() {\n  var subscription = _react.default.useMemo(function () {\n    return {\n      getCurrentValue: function getCurrentValue() {\n        return _reactNative.AppState.currentState;\n      },\n      subscribe: function subscribe(callback) {\n        var subsription = _reactNative.AppState.addEventListener('change', callback);\n        return function () {\n          if (_reactNative.AppState.removeEventListener) {\n            _reactNative.AppState.removeEventListener('change', callback);\n          } else {\n            subsription.remove();\n          }\n        };\n      }\n    };\n  }, []);\n  var isSSR = (0, _NativeBaseContext.useNativeBaseConfig)('useBreakpointResolvedProps').isSSR;\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    return (0, _shim.useSyncExternalStore)(subscription.subscribe, subscription.getCurrentValue, subscription.getCurrentValue);\n  }\n};\nvar useColorScheme = exports.useColorScheme = function useColorScheme() {\n  var colorScheme = (0, _reactNative.useColorScheme)();\n  var _useState = (0, _react.useState)(colorScheme),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    currentScheme = _useState2[0],\n    setCurrentScheme = _useState2[1];\n  var appState = useAppState();\n  (0, _react.useEffect)(function () {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n  return currentScheme;\n};\nfunction useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = useColorScheme();\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n  var _useState3 = (0, _react.useState)(initialColorMode),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    colorMode = _useState4[0],\n    setRawMode = _useState4[1];\n  var setColorMode = _react.default.useCallback(function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* (val) {\n      if (colorModeManager) {\n        yield colorModeManager.set(val);\n      }\n      setRawMode(val);\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [colorModeManager]);\n  (0, _react.useEffect)(function () {\n    if (colorModeManager) {\n      (function () {\n        var _getMode = (0, _asyncToGenerator2.default)(function* () {\n          var value = yield colorModeManager.get(initialColorMode);\n          if (value && value !== colorMode) {\n            setRawMode(value);\n          }\n        });\n        function getMode() {\n          return _getMode.apply(this, arguments);\n        }\n        return getMode;\n      })()();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  (0, _react.useEffect)(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\nfunction useAccessibleColors() {\n  var _React$useContext2 = _react.default.useContext(_Context.HybridContext),\n    colorModeContext = _React$useContext2.colorMode;\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_Context","_reactNative","_shim","_NativeBaseContext","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","useColorMode","exports","_React$useContext","React","useContext","HybridContext","colorModeContext","colorMode","undefined","Error","useColorModeValue","light","dark","_useColorMode","useAppState","subscription","useMemo","getCurrentValue","AppState","currentState","subscribe","callback","subsription","addEventListener","removeEventListener","remove","isSSR","useNativeBaseConfig","useSyncExternalStore","useColorScheme","colorScheme","_useColorScheme","_useState","useState","_useState2","_slicedToArray2","currentScheme","setCurrentScheme","appState","useEffect","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","_useState3","_useState4","setRawMode","setColorMode","useCallback","_ref","_asyncToGenerator2","val","_x","apply","arguments","_getMode","value","getMode","useAccessibleColors","_React$useContext2","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\native-base\\lib\\module\\core\\color-mode\\hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nimport { useNativeBaseConfig } from '../NativeBaseContext';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport const useAppState = () => {\n  const subscription = React.useMemo(\n    () => ({\n      getCurrentValue: () => AppState.currentState,\n      subscribe: (callback: () => void) => {\n        const subsription = AppState.addEventListener('change', callback);\n        return () => {\n          if (AppState.removeEventListener) {\n            // React Native < 0.65\n            AppState.removeEventListener('change', callback);\n          } else {\n            // React Native >= 0.65\n            // @ts-ignore:next-line ignoring ts error as devDependency contains \"@types/react-native\" < 0.65\n            subsription.remove();\n          }\n        };\n      },\n    }),\n    []\n  );\n\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSyncExternalStore(\n      subscription.subscribe,\n      subscription.getCurrentValue,\n      subscription.getCurrentValue\n    );\n  }\n};\n\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n\n  return currentScheme;\n};\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        const value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}