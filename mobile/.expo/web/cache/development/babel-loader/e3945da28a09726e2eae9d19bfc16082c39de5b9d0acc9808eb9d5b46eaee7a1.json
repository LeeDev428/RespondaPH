{"ast":null,"code":"var $9a54e9cd5db23b5d$exports = require(\"./isScrollable.main.js\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"getScrollParent\", function () {\n  return $d796e7157ac96470$export$cfa2225e87938781;\n});\nfunction $d796e7157ac96470$export$cfa2225e87938781(node, checkForOverflow) {\n  var scrollableNode = node;\n  if ((0, $9a54e9cd5db23b5d$exports.isScrollable)(scrollableNode, checkForOverflow)) scrollableNode = scrollableNode.parentElement;\n  while (scrollableNode && !(0, $9a54e9cd5db23b5d$exports.isScrollable)(scrollableNode, checkForOverflow)) scrollableNode = scrollableNode.parentElement;\n  return scrollableNode || document.scrollingElement || document.documentElement;\n}","map":{"version":3,"names":["$d796e7157ac96470$export$cfa2225e87938781","node","checkForOverflow","scrollableNode","$9a54e9cd5db23b5d$exports","isScrollable","parentElement","document","scrollingElement","documentElement"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\utils\\dist\\packages\\@react-aria\\utils\\src\\getScrollParent.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isScrollable} from './isScrollable';\n\nexport function getScrollParent(node: Element, checkForOverflow?: boolean): Element {\n  let scrollableNode: Element | null = node;\n  if (isScrollable(scrollableNode, checkForOverflow)) {\n    scrollableNode = scrollableNode.parentElement;\n  }\n\n  while (scrollableNode && !isScrollable(scrollableNode, checkForOverflow)) {\n    scrollableNode = scrollableNode.parentElement;\n  }\n\n  return scrollableNode || document.scrollingElement || document.documentElement;\n}\n\n"],"mappings":";;;;;;;;;;;;AAcO,SAASA,0CAAgBC,IAAa,EAAEC,gBAA0B;EACvE,IAAIC,cAAA,GAAiCF,IAAA;EACrC,IAAI,IAAAG,yBAAA,CAAAC,YAAW,EAAEF,cAAA,EAAgBD,gBAAA,GAC/BC,cAAA,GAAiBA,cAAA,CAAeG,aAAa;EAG/C,OAAOH,cAAA,IAAkB,CAAC,IAAAC,yBAAA,CAAAC,YAAW,EAAEF,cAAA,EAAgBD,gBAAA,GACrDC,cAAA,GAAiBA,cAAA,CAAeG,aAAa;EAG/C,OAAOH,cAAA,IAAkBI,QAAA,CAASC,gBAAgB,IAAID,QAAA,CAASE,eAAe;AAChF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}