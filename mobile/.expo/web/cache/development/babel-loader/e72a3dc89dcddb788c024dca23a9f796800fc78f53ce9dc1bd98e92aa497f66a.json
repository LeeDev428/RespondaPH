{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useKeyboardDismissable = exports.keyboardDismissHandlerManager = void 0;\nvar _react = require(\"react\");\nvar _useBackHandler = require(\"./useBackHandler\");\nvar keyboardDismissHandlers = [];\nvar keyboardDismissHandlerManager = exports.keyboardDismissHandlerManager = {\n  push: function push(handler) {\n    keyboardDismissHandlers.push(handler);\n    return function () {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(function (h) {\n        return h !== handler;\n      });\n    };\n  },\n  length: function length() {\n    return keyboardDismissHandlers.length;\n  },\n  pop: function pop() {\n    return keyboardDismissHandlers.pop();\n  }\n};\nvar useKeyboardDismissable = exports.useKeyboardDismissable = function useKeyboardDismissable(_ref) {\n  var enabled = _ref.enabled,\n    callback = _ref.callback;\n  (0, _react.useEffect)(function () {\n    var cleanupFn = function cleanupFn() {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return function () {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n  (0, _useBackHandler.useBackHandler)({\n    enabled: enabled,\n    callback: callback\n  });\n};","map":{"version":3,"names":["_react","require","_useBackHandler","keyboardDismissHandlers","keyboardDismissHandlerManager","exports","push","handler","filter","h","length","pop","useKeyboardDismissable","_ref","enabled","callback","useEffect","cleanupFn","useBackHandler"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-native-aria\\interactions\\src\\useKeyboardDismisssable.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { useBackHandler } from './useBackHandler';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n"],"mappings":";;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,eAAA,GAAAD,OAAA;AAOA,IAAIE,uBAAyC,GAAG,EAAE;AAC3C,IAAMC,6BAA6B,GAAAC,OAAA,CAAAD,6BAAA,GAAG;EAC3CE,IAAI,EAAG,SAAPA,IAAIA,CAAGC,OAAkB,EAAK;IAC5BJ,uBAAuB,CAACG,IAAI,CAACC,OAAO,CAAC;IACrC,OAAO,YAAM;MACXJ,uBAAuB,GAAGA,uBAAuB,CAACK,MAAM,CACrD,UAAAC,CAAC;QAAA,OAAKA,CAAC,KAAKF,OACf;MAAA,EAAC;IACH,CAAC;EACH,CAAC;EACDG,MAAM,EAAE,SAARA,MAAMA,CAAA;IAAA,OAAQP,uBAAuB,CAACO,MAAM;EAAA;EAC5CC,GAAG,EAAE,SAALA,GAAGA,CAAA,EAAQ;IACT,OAAOR,uBAAuB,CAACQ,GAAG,CAAC,CAAC;EACtC;AACF,CAAC;AAKM,IAAMC,sBAAsB,GAAAP,OAAA,CAAAO,sBAAA,GAAG,SAAzBA,sBAAsBA,CAAAC,IAAA,EAAuC;EAAA,IAAjCC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAEC,QAAA,GAAAF,IAAA,CAAAE,QAAA;EAChD,IAAAC,gBAAS,EAAC,YAAM;IACd,IAAIC,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS,CAAC,CAAC;IACxB,IAAIH,OAAO,EAAE;MACXG,SAAS,GAAGb,6BAA6B,CAACE,IAAI,CAACS,QAAQ,CAAC;IAC1D,CAAC,MAAM;MACLE,SAAS,CAAC,CAAC;IACb;IACA,OAAO,YAAM;MACXA,SAAS,CAAC,CAAC;IACb,CAAC;EACH,CAAC,EAAE,CAACH,OAAO,EAAEC,QAAQ,CAAC,CAAC;EAEvB,IAAAG,8BAAc,EAAC;IAAEJ,OAAO,EAAPA,OAAO;IAAEC,QAAA,EAAAA;EAAS,CAAC,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}