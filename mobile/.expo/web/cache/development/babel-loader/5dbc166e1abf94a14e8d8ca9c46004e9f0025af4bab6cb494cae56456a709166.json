{"ast":null,"code":"var $eQbp7$reactariafocus = require(\"@react-aria/focus\");\nvar $eQbp7$react = require(\"react\");\nvar $eQbp7$reactariainteractions = require(\"@react-aria/interactions\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useOverlay\", function () {\n  return $82711f9cb668ecdb$export$ea8f71083e90600f;\n});\nvar $82711f9cb668ecdb$var$visibleOverlays = [];\nfunction $82711f9cb668ecdb$export$ea8f71083e90600f(props, ref) {\n  var onClose = props.onClose,\n    shouldCloseOnBlur = props.shouldCloseOnBlur,\n    isOpen = props.isOpen,\n    _props$isDismissable = props.isDismissable,\n    isDismissable = _props$isDismissable === void 0 ? false : _props$isDismissable,\n    _props$isKeyboardDism = props.isKeyboardDismissDisabled,\n    isKeyboardDismissDisabled = _props$isKeyboardDism === void 0 ? false : _props$isKeyboardDism,\n    shouldCloseOnInteractOutside = props.shouldCloseOnInteractOutside;\n  (0, $eQbp7$react.useEffect)(function () {\n    if (isOpen && !$82711f9cb668ecdb$var$visibleOverlays.includes(ref)) {\n      $82711f9cb668ecdb$var$visibleOverlays.push(ref);\n      return function () {\n        var index = $82711f9cb668ecdb$var$visibleOverlays.indexOf(ref);\n        if (index >= 0) $82711f9cb668ecdb$var$visibleOverlays.splice(index, 1);\n      };\n    }\n  }, [isOpen, ref]);\n  var onHide = function onHide() {\n    if ($82711f9cb668ecdb$var$visibleOverlays[$82711f9cb668ecdb$var$visibleOverlays.length - 1] === ref && onClose) onClose();\n  };\n  var onInteractOutsideStart = function onInteractOutsideStart(e) {\n    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {\n      if ($82711f9cb668ecdb$var$visibleOverlays[$82711f9cb668ecdb$var$visibleOverlays.length - 1] === ref) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n  };\n  var onInteractOutside = function onInteractOutside(e) {\n    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {\n      if ($82711f9cb668ecdb$var$visibleOverlays[$82711f9cb668ecdb$var$visibleOverlays.length - 1] === ref) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n      onHide();\n    }\n  };\n  var onKeyDown = function onKeyDown(e) {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled && !e.nativeEvent.isComposing) {\n      e.stopPropagation();\n      e.preventDefault();\n      onHide();\n    }\n  };\n  (0, $eQbp7$reactariainteractions.useInteractOutside)({\n    ref: ref,\n    onInteractOutside: isDismissable && isOpen ? onInteractOutside : undefined,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  var _ref = (0, $eQbp7$reactariainteractions.useFocusWithin)({\n      isDisabled: !shouldCloseOnBlur,\n      onBlurWithin: function onBlurWithin(e) {\n        if (!e.relatedTarget || (0, $eQbp7$reactariafocus.isElementInChildOfActiveScope)(e.relatedTarget)) return;\n        if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget)) onClose === null || onClose === void 0 ? void 0 : onClose();\n      }\n    }),\n    focusWithinProps = _ref.focusWithinProps;\n  var onPointerDownUnderlay = function onPointerDownUnderlay(e) {\n    if (e.target === e.currentTarget) e.preventDefault();\n  };\n  return {\n    overlayProps: Object.assign({\n      onKeyDown: onKeyDown\n    }, focusWithinProps),\n    underlayProps: {\n      onPointerDown: onPointerDownUnderlay\n    }\n  };\n}","map":{"version":3,"names":["$82711f9cb668ecdb$var$visibleOverlays","$82711f9cb668ecdb$export$ea8f71083e90600f","props","ref","onClose","shouldCloseOnBlur","isOpen","_props$isDismissable","isDismissable","_props$isKeyboardDism","isKeyboardDismissDisabled","shouldCloseOnInteractOutside","$eQbp7$react","useEffect","includes","push","index","indexOf","splice","onHide","length","onInteractOutsideStart","e","target","stopPropagation","preventDefault","onInteractOutside","onKeyDown","key","nativeEvent","isComposing","$eQbp7$reactariainteractions","useInteractOutside","undefined","_ref","useFocusWithin","isDisabled","onBlurWithin","relatedTarget","$eQbp7$reactariafocus","isElementInChildOfActiveScope","focusWithinProps","onPointerDownUnderlay","currentTarget","overlayProps","Object","assign","underlayProps","onPointerDown"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\overlays\\dist\\packages\\@react-aria\\overlays\\src\\useOverlay.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, RefObject} from '@react-types/shared';\nimport {isElementInChildOfActiveScope} from '@react-aria/focus';\nimport {useEffect} from 'react';\nimport {useFocusWithin, useInteractOutside} from '@react-aria/interactions';\n\nexport interface AriaOverlayProps {\n  /** Whether the overlay is currently open. */\n  isOpen?: boolean,\n\n  /** Handler that is called when the overlay should close. */\n  onClose?: () => void,\n\n  /**\n   * Whether to close the overlay when the user interacts outside it.\n   * @default false\n   */\n  isDismissable?: boolean,\n\n  /** Whether the overlay should close when focus is lost or moves outside it. */\n  shouldCloseOnBlur?: boolean,\n\n  /**\n   * Whether pressing the escape key to close the overlay should be disabled.\n   * @default false\n   */\n  isKeyboardDismissDisabled?: boolean,\n\n  /**\n   * When user interacts with the argument element outside of the overlay ref,\n   * return true if onClose should be called.  This gives you a chance to filter\n   * out interaction with elements that should not dismiss the overlay.\n   * By default, onClose will always be called on interaction outside the overlay ref.\n   */\n  shouldCloseOnInteractOutside?: (element: Element) => boolean\n}\n\nexport interface OverlayAria {\n  /** Props to apply to the overlay container element. */\n  overlayProps: DOMAttributes,\n  /** Props to apply to the underlay element, if any. */\n  underlayProps: DOMAttributes\n}\n\nconst visibleOverlays: RefObject<Element | null>[] = [];\n\n/**\n * Provides the behavior for overlays such as dialogs, popovers, and menus.\n * Hides the overlay when the user interacts outside it, when the Escape key is pressed,\n * or optionally, on blur. Only the top-most overlay will close at once.\n */\nexport function useOverlay(props: AriaOverlayProps, ref: RefObject<Element | null>): OverlayAria {\n  let {\n    onClose,\n    shouldCloseOnBlur,\n    isOpen,\n    isDismissable = false,\n    isKeyboardDismissDisabled = false,\n    shouldCloseOnInteractOutside\n  } = props;\n\n  // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.\n  useEffect(() => {\n    if (isOpen && !visibleOverlays.includes(ref)) {\n      visibleOverlays.push(ref);\n      return () => {\n        let index = visibleOverlays.indexOf(ref);\n        if (index >= 0) {\n          visibleOverlays.splice(index, 1);\n        }\n      };\n    }\n  }, [isOpen, ref]);\n\n  // Only hide the overlay when it is the topmost visible overlay in the stack\n  let onHide = () => {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n\n  let onInteractOutsideStart = (e: PointerEvent) => {\n    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target as Element)) {\n      if (visibleOverlays[visibleOverlays.length - 1] === ref) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n  };\n\n  let onInteractOutside = (e: PointerEvent) => {\n    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target as Element)) {\n      if (visibleOverlays[visibleOverlays.length - 1] === ref) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n      onHide();\n    }\n  };\n\n  // Handle the escape key\n  let onKeyDown = (e) => {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled && !e.nativeEvent.isComposing) {\n      e.stopPropagation();\n      e.preventDefault();\n      onHide();\n    }\n  };\n\n  // Handle clicking outside the overlay to close it\n  useInteractOutside({ref, onInteractOutside: isDismissable && isOpen ? onInteractOutside : undefined, onInteractOutsideStart});\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: (e) => {\n      // Do not close if relatedTarget is null, which means focus is lost to the body.\n      // That can happen when switching tabs, or due to a VoiceOver/Chrome bug with Control+Option+Arrow navigation.\n      // Clicking on the body to close the overlay should already be handled by useInteractOutside.\n      // https://github.com/adobe/react-spectrum/issues/4130\n      // https://github.com/adobe/react-spectrum/issues/4922\n      //\n      // If focus is moving into a child focus scope (e.g. menu inside a dialog),\n      // do not close the outer overlay. At this point, the active scope should\n      // still be the outer overlay, since blur events run before focus.\n      if (!e.relatedTarget || isElementInChildOfActiveScope(e.relatedTarget)) {\n        return;\n      }\n\n      if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget as Element)) {\n        onClose?.();\n      }\n    }\n  });\n\n  let onPointerDownUnderlay = e => {\n    // fixes a firefox issue that starts text selection https://bugzilla.mozilla.org/show_bug.cgi?id=1675846\n    if (e.target === e.currentTarget) {\n      e.preventDefault();\n    }\n  };\n\n  return {\n    overlayProps: {\n      onKeyDown,\n      ...focusWithinProps\n    },\n    underlayProps: {\n      onPointerDown: onPointerDownUnderlay\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}