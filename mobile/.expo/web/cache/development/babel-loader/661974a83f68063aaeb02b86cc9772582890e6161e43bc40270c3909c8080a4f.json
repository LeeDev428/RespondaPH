{"ast":null,"code":"var $2jyrz$reactariautils = require(\"@react-aria/utils\");\nvar $2jyrz$reactariainteractions = require(\"@react-aria/interactions\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useToggle\", function () {\n  return $ee1b638d33c90dcc$export$cbe85ee05b554577;\n});\nfunction $ee1b638d33c90dcc$export$cbe85ee05b554577(props, state, ref) {\n  var _props$isDisabled = props.isDisabled,\n    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n    _props$isReadOnly = props.isReadOnly,\n    isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,\n    value = props.value,\n    name = props.name,\n    form = props.form,\n    children = props.children,\n    ariaLabel = props['aria-label'],\n    ariaLabelledby = props['aria-labelledby'],\n    _props$validationStat = props.validationState,\n    validationState = _props$validationStat === void 0 ? 'valid' : _props$validationStat,\n    isInvalid = props.isInvalid,\n    onPressStart = props.onPressStart,\n    onPressEnd = props.onPressEnd,\n    onPressChange = props.onPressChange,\n    _onPress = props.onPress,\n    onPressUp = props.onPressUp,\n    onClick = props.onClick;\n  var onChange = function onChange(e) {\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n  var hasChildren = children != null;\n  var hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel && process.env.NODE_ENV !== 'production') console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  var _ref = (0, $2jyrz$reactariainteractions.usePress)({\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      onPressChange: onPressChange,\n      onPress: _onPress,\n      onPressUp: onPressUp,\n      onClick: onClick,\n      isDisabled: isDisabled\n    }),\n    pressProps = _ref.pressProps,\n    isPressed = _ref.isPressed;\n  var _ref2 = (0, $2jyrz$reactariainteractions.usePress)({\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      onPressChange: onPressChange,\n      onPressUp: onPressUp,\n      onClick: onClick,\n      onPress: function onPress(e) {\n        var _ref_current;\n        _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n        state.toggle();\n        (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.focus();\n      },\n      isDisabled: isDisabled || isReadOnly\n    }),\n    labelProps = _ref2.pressProps,\n    isLabelPressed = _ref2.isPressed;\n  var _ref3 = (0, $2jyrz$reactariainteractions.useFocusable)(props, ref),\n    focusableProps = _ref3.focusableProps;\n  var interactions = (0, $2jyrz$reactariautils.mergeProps)(pressProps, focusableProps);\n  var domProps = (0, $2jyrz$reactariautils.filterDOMProps)(props, {\n    labelable: true\n  });\n  (0, $2jyrz$reactariautils.useFormReset)(ref, state.defaultSelected, state.setSelected);\n  return {\n    labelProps: (0, $2jyrz$reactariautils.mergeProps)(labelProps, {\n      onClick: function onClick(e) {\n        return e.preventDefault();\n      }\n    }),\n    inputProps: (0, $2jyrz$reactariautils.mergeProps)(domProps, Object.assign({\n      'aria-invalid': isInvalid || validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      onChange: onChange,\n      disabled: isDisabled\n    }, value == null ? {} : {\n      value: value\n    }, {\n      name: name,\n      form: form,\n      type: 'checkbox'\n    }, interactions)),\n    isSelected: state.isSelected,\n    isPressed: isPressed || isLabelPressed,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isInvalid: isInvalid || validationState === 'invalid'\n  };\n}","map":{"version":3,"names":["$ee1b638d33c90dcc$export$cbe85ee05b554577","props","state","ref","_props$isDisabled","isDisabled","_props$isReadOnly","isReadOnly","value","name","form","children","ariaLabel","ariaLabelledby","_props$validationStat","validationState","isInvalid","onPressStart","onPressEnd","onPressChange","onPress","onPressUp","onClick","onChange","e","stopPropagation","setSelected","target","checked","hasChildren","hasAriaLabel","process","env","NODE_ENV","console","warn","_ref","$2jyrz$reactariainteractions","usePress","pressProps","isPressed","_ref2","_ref_current","toggle","current","focus","labelProps","isLabelPressed","_ref3","useFocusable","focusableProps","interactions","$2jyrz$reactariautils","mergeProps","domProps","filterDOMProps","labelable","useFormReset","defaultSelected","preventDefault","inputProps","Object","assign","undefined","disabled","type","isSelected"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\toggle\\dist\\packages\\@react-aria\\toggle\\src\\useToggle.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps, useFormReset} from '@react-aria/utils';\nimport {InputHTMLAttributes, LabelHTMLAttributes} from 'react';\nimport {RefObject} from '@react-types/shared';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable, usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /** Props to be spread on the label element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to be spread on the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the toggle is selected. */\n  isSelected: boolean,\n  /** Whether the toggle is in a pressed state. */\n  isPressed: boolean,\n  /** Whether the toggle is disabled. */\n  isDisabled: boolean,\n  /** Whether the toggle is read only. */\n  isReadOnly: boolean,\n  /** Whether the toggle is invalid. */\n  isInvalid: boolean\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLInputElement | null>): ToggleAria {\n  let {\n    isDisabled = false,\n    isReadOnly = false,\n    value,\n    name,\n    form,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid',\n    isInvalid,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    onPressUp,\n    onClick\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel && process.env.NODE_ENV !== 'production') {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // Handle press state for keyboard interactions and cases where labelProps is not used.\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    onPressUp,\n    onClick,\n    isDisabled\n  });\n\n  // Handle press state on the label.\n  let {pressProps: labelProps, isPressed: isLabelPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPressUp,\n    onClick,\n    onPress(e) {\n      onPress?.(e);\n      state.toggle();\n      ref.current?.focus();\n    },\n    isDisabled: isDisabled || isReadOnly\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  useFormReset(ref, state.defaultSelected, state.setSelected);\n\n  return {\n    labelProps: mergeProps(labelProps, {onClick: e => e.preventDefault()}),\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': isInvalid || validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {value}),\n      name,\n      form,\n      type: 'checkbox',\n      ...interactions\n    }),\n    isSelected: state.isSelected,\n    isPressed: isPressed || isLabelPressed,\n    isDisabled,\n    isReadOnly,\n    isInvalid: isInvalid || validationState === 'invalid'\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}