{"ast":null,"code":"var _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar $7hdEs$reactstatelyoverlays = require(\"@react-stately/overlays\");\nvar $7hdEs$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useMenuTriggerState\", function () {\n  return $f39cdb649cd48930$export$79fefeb1c2091ac3;\n});\nfunction $f39cdb649cd48930$export$79fefeb1c2091ac3(props) {\n  var overlayTriggerState = (0, $7hdEs$reactstatelyoverlays.useOverlayTriggerState)(props);\n  var _ref = (0, $7hdEs$react.useState)(null),\n    _ref2 = _slicedToArray(_ref, 2),\n    focusStrategy = _ref2[0],\n    setFocusStrategy = _ref2[1];\n  var _ref3 = (0, $7hdEs$react.useState)([]),\n    _ref4 = _slicedToArray(_ref3, 2),\n    expandedKeysStack = _ref4[0],\n    setExpandedKeysStack = _ref4[1];\n  var closeAll = function closeAll() {\n    setExpandedKeysStack([]);\n    overlayTriggerState.close();\n  };\n  var openSubmenu = function openSubmenu(triggerKey, level) {\n    setExpandedKeysStack(function (oldStack) {\n      if (level > oldStack.length) return oldStack;\n      return [].concat(_toConsumableArray(oldStack.slice(0, level)), [triggerKey]);\n    });\n  };\n  var closeSubmenu = function closeSubmenu(triggerKey, level) {\n    setExpandedKeysStack(function (oldStack) {\n      var key = oldStack[level];\n      if (key === triggerKey) return oldStack.slice(0, level);else return oldStack;\n    });\n  };\n  return Object.assign({\n    focusStrategy: focusStrategy\n  }, overlayTriggerState, {\n    open: function open() {\n      var focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle: function toggle() {\n      var focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    },\n    close: function close() {\n      closeAll();\n    },\n    expandedKeysStack: expandedKeysStack,\n    openSubmenu: openSubmenu,\n    closeSubmenu: closeSubmenu\n  });\n}","map":{"version":3,"names":["$f39cdb649cd48930$export$79fefeb1c2091ac3","props","overlayTriggerState","$7hdEs$reactstatelyoverlays","useOverlayTriggerState","_ref","$7hdEs$react","useState","_ref2","_slicedToArray","focusStrategy","setFocusStrategy","_ref3","_ref4","expandedKeysStack","setExpandedKeysStack","closeAll","close","openSubmenu","triggerKey","level","oldStack","length","concat","_toConsumableArray","slice","closeSubmenu","key","Object","assign","open","arguments","undefined","toggle"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-stately\\menu\\dist\\packages\\@react-stately\\menu\\src\\useMenuTriggerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy, Key} from '@react-types/shared';\nimport {MenuTriggerProps} from '@react-types/menu';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {useState} from 'react';\n\nexport interface MenuTriggerState extends OverlayTriggerState {\n  /** Controls which item will be auto focused when the menu opens. */\n  readonly focusStrategy: FocusStrategy | null,\n\n  /** Opens the menu. */\n  open(focusStrategy?: FocusStrategy | null): void,\n\n  /** Toggles the menu. */\n  toggle(focusStrategy?: FocusStrategy | null): void\n}\n\nexport interface RootMenuTriggerState extends MenuTriggerState {\n  /** Opens a specific submenu tied to a specific menu item at a specific level. */\n  openSubmenu: (triggerKey: Key, level: number) => void,\n\n  /** Closes a specific submenu tied to a specific menu item at a specific level. */\n  closeSubmenu: (triggerKey: Key, level: number) => void,\n\n  /** An array of open submenu trigger keys within the menu tree.\n   * The index of key within array matches the submenu level in the tree.\n   */\n  expandedKeysStack: Key[],\n\n  /** Closes the menu and all submenus in the menu tree. */\n  close: () => void\n}\n\n/**\n * Manages state for a menu trigger. Tracks whether the menu is currently open,\n * and controls which item will receive focus when it opens. Also tracks the open submenus within\n * the menu tree via their trigger keys.\n */\nexport function useMenuTriggerState(props: MenuTriggerProps): RootMenuTriggerState  {\n  let overlayTriggerState = useOverlayTriggerState(props);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy | null>(null);\n  let [expandedKeysStack, setExpandedKeysStack] = useState<Key[]>([]);\n\n  let closeAll = () => {\n    setExpandedKeysStack([]);\n    overlayTriggerState.close();\n  };\n\n  let openSubmenu = (triggerKey: Key, level: number) => {\n    setExpandedKeysStack(oldStack => {\n      if (level > oldStack.length) {\n        return oldStack;\n      }\n\n      return [...oldStack.slice(0, level), triggerKey];\n    });\n  };\n\n  let closeSubmenu = (triggerKey: Key, level: number) => {\n    setExpandedKeysStack(oldStack => {\n      let key = oldStack[level];\n      if (key === triggerKey) {\n        return oldStack.slice(0, level);\n      } else {\n        return oldStack;\n      }\n    });\n  };\n\n  return {\n    focusStrategy,\n    ...overlayTriggerState,\n    open(focusStrategy: FocusStrategy | null = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle(focusStrategy: FocusStrategy | null = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    },\n    close() {\n      closeAll();\n    },\n    expandedKeysStack,\n    openSubmenu,\n    closeSubmenu\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;AAiDO,SAASA,0CAAoBC,KAAuB;EACzD,IAAIC,mBAAA,GAAsB,IAAAC,2BAAA,CAAAC,sBAAqB,EAAEH,KAAA;EACjD,IAAAI,IAAA,GAAwC,IAAAC,YAAA,CAAAC,QAAO,EAAwB;IAAAC,KAAA,GAAAC,cAAA,CAAAJ,IAAA;IAAlEK,aAAA,GAAAF,KAAA;IAAeG,gBAAA,GAAAH,KAAA;EACpB,IAAAI,KAAA,GAAgD,IAAAN,YAAA,CAAAC,QAAO,EAAS,EAAE;IAAAM,KAAA,GAAAJ,cAAA,CAAAG,KAAA;IAA7DE,iBAAA,GAAAD,KAAA;IAAmBE,oBAAA,GAAAF,KAAA;EAExB,IAAIG,QAAA,GAAW,SAAXA,SAAA,EAAW;IACbD,oBAAA,CAAqB,EAAE;IACvBb,mBAAA,CAAoBe,KAAK;EAC3B;EAEA,IAAIC,WAAA,GAAc,SAAdA,YAAeC,UAAA,EAAiBC,KAAA;IAClCL,oBAAA,CAAqB,UAAAM,QAAA;MACnB,IAAID,KAAA,GAAQC,QAAA,CAASC,MAAM,EACzB,OAAOD,QAAA;MAGT,UAAAE,MAAA,CAAAC,kBAAA,CAAWH,QAAA,CAASI,KAAK,CAAC,GAAGL,KAAA,KAAQD,UAAA;IACvC;EACF;EAEA,IAAIO,YAAA,GAAe,SAAfA,aAAgBP,UAAA,EAAiBC,KAAA;IACnCL,oBAAA,CAAqB,UAAAM,QAAA;MACnB,IAAIM,GAAA,GAAMN,QAAQ,CAACD,KAAA,CAAM;MACzB,IAAIO,GAAA,KAAQR,UAAA,EACV,OAAOE,QAAA,CAASI,KAAK,CAAC,GAAGL,KAAA,OAEzB,OAAOC,QAAA;IAEX;EACF;EAEA,OAAAO,MAAA,CAAAC,MAAA;mBACEnB;EAAA,GACGR,mBAAmB;IACtB4B,IAAA,WAAAA,KAAA,EAA+C;MAAA,IAA1CpB,aAAA,GAAAqB,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAsC,IAAI;MAC7CpB,gBAAA,CAAiBD,aAAA;MACjBR,mBAAA,CAAoB4B,IAAI;IAC1B;IACAG,MAAA,WAAAA,OAAA,EAAiD;MAAA,IAA1CvB,aAAA,GAAAqB,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAsC,IAAI;MAC/CpB,gBAAA,CAAiBD,aAAA;MACjBR,mBAAA,CAAoB+B,MAAM;IAC5B;IACAhB,KAAA,WAAAA,MAAA;MACED,QAAA;IACF;uBACAF,iBAAA;iBACAI,WAAA;kBACAQ;EAAA;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}