{"ast":null,"code":"var $eeb149278aae5c67$exports = require(\"./utils.main.js\");\nvar $gWC9A$reactariautils = require(\"@react-aria/utils\");\nvar $gWC9A$react = require(\"react\");\nvar $gWC9A$reactariainteractions = require(\"@react-aria/interactions\");\nvar $gWC9A$reactariaform = require(\"@react-aria/form\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useRadio\", function () {\n  return $e184702b1b7f1863$export$37b0961d2f4751e2;\n});\nfunction $e184702b1b7f1863$export$37b0961d2f4751e2(props, state, ref) {\n  var value = props.value,\n    children = props.children,\n    ariaLabel = props['aria-label'],\n    ariaLabelledby = props['aria-labelledby'],\n    onPressStart = props.onPressStart,\n    onPressEnd = props.onPressEnd,\n    onPressChange = props.onPressChange,\n    _onPress = props.onPress,\n    onPressUp = props.onPressUp,\n    onClick = props.onClick;\n  var isDisabled = props.isDisabled || state.isDisabled;\n  var hasChildren = children != null;\n  var hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel && process.env.NODE_ENV !== 'production') console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  var checked = state.selectedValue === value;\n  var onChange = function onChange(e) {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n  var _ref = (0, $gWC9A$reactariainteractions.usePress)({\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      onPressChange: onPressChange,\n      onPress: _onPress,\n      onPressUp: onPressUp,\n      onClick: onClick,\n      isDisabled: isDisabled\n    }),\n    pressProps = _ref.pressProps,\n    isPressed = _ref.isPressed;\n  var _ref2 = (0, $gWC9A$reactariainteractions.usePress)({\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      onPressChange: onPressChange,\n      onPressUp: onPressUp,\n      onClick: onClick,\n      isDisabled: isDisabled,\n      onPress: function onPress(e) {\n        var _ref_current;\n        _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n        state.setSelectedValue(value);\n        (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.focus();\n      }\n    }),\n    labelProps = _ref2.pressProps,\n    isLabelPressed = _ref2.isPressed;\n  var _ref3 = (0, $gWC9A$reactariainteractions.useFocusable)((0, $gWC9A$reactariautils.mergeProps)(props, {\n      onFocus: function onFocus() {\n        return state.setLastFocusedValue(value);\n      }\n    }), ref),\n    focusableProps = _ref3.focusableProps;\n  var interactions = (0, $gWC9A$reactariautils.mergeProps)(pressProps, focusableProps);\n  var domProps = (0, $gWC9A$reactariautils.filterDOMProps)(props, {\n    labelable: true\n  });\n  var tabIndex = -1;\n  if (state.selectedValue != null) {\n    if (state.selectedValue === value) tabIndex = 0;\n  } else if (state.lastFocusedValue === value || state.lastFocusedValue == null) tabIndex = 0;\n  if (isDisabled) tabIndex = undefined;\n  var _get = (0, $eeb149278aae5c67$exports.radioGroupData).get(state),\n    name = _get.name,\n    form = _get.form,\n    descriptionId = _get.descriptionId,\n    errorMessageId = _get.errorMessageId,\n    validationBehavior = _get.validationBehavior;\n  (0, $gWC9A$reactariautils.useFormReset)(ref, state.defaultSelectedValue, state.setSelectedValue);\n  (0, $gWC9A$reactariaform.useFormValidation)({\n    validationBehavior: validationBehavior\n  }, state, ref);\n  return {\n    labelProps: (0, $gWC9A$reactariautils.mergeProps)(labelProps, (0, $gWC9A$react.useMemo)(function () {\n      return {\n        onClick: function onClick(e) {\n          return e.preventDefault();\n        },\n        onMouseDown: function onMouseDown(e) {\n          return e.preventDefault();\n        }\n      };\n    }, [])),\n    inputProps: (0, $gWC9A$reactariautils.mergeProps)(domProps, Object.assign({}, interactions, {\n      type: 'radio',\n      name: name,\n      form: form,\n      tabIndex: tabIndex,\n      disabled: isDisabled,\n      required: state.isRequired && validationBehavior === 'native',\n      checked: checked,\n      value: value,\n      onChange: onChange,\n      'aria-describedby': [props['aria-describedby'], state.isInvalid ? errorMessageId : null, descriptionId].filter(Boolean).join(' ') || undefined\n    })),\n    isDisabled: isDisabled,\n    isSelected: checked,\n    isPressed: isPressed || isLabelPressed\n  };\n}","map":{"version":3,"names":["$e184702b1b7f1863$export$37b0961d2f4751e2","props","state","ref","value","children","ariaLabel","ariaLabelledby","onPressStart","onPressEnd","onPressChange","onPress","onPressUp","onClick","isDisabled","hasChildren","hasAriaLabel","process","env","NODE_ENV","console","warn","checked","selectedValue","onChange","e","stopPropagation","setSelectedValue","_ref","$gWC9A$reactariainteractions","usePress","pressProps","isPressed","_ref2","_ref_current","current","focus","labelProps","isLabelPressed","_ref3","useFocusable","$gWC9A$reactariautils","mergeProps","onFocus","setLastFocusedValue","focusableProps","interactions","domProps","filterDOMProps","labelable","tabIndex","lastFocusedValue","undefined","_get","$eeb149278aae5c67$exports","radioGroupData","get","name","form","descriptionId","errorMessageId","validationBehavior","useFormReset","defaultSelectedValue","$gWC9A$reactariaform","useFormValidation","$gWC9A$react","useMemo","preventDefault","onMouseDown","inputProps","Object","assign","type","disabled","required","isRequired","isInvalid","filter","Boolean","join","isSelected"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\radio\\dist\\packages\\@react-aria\\radio\\src\\useRadio.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps, useFormReset} from '@react-aria/utils';\nimport {InputHTMLAttributes, LabelHTMLAttributes, useMemo} from 'react';\nimport {radioGroupData} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {RefObject} from '@react-types/shared';\nimport {useFocusable, usePress} from '@react-aria/interactions';\nimport {useFormValidation} from '@react-aria/form';\n\nexport interface RadioAria {\n  /** Props for the label wrapper element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the radio is disabled. */\n  isDisabled: boolean,\n  /** Whether the radio is currently selected. */\n  isSelected: boolean,\n  /** Whether the radio is in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an individual\n * radio button in a radio group.\n * @param props - Props for the radio.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n * @param ref - Ref to the HTML input element.\n */\nexport function useRadio(props: AriaRadioProps, state: RadioGroupState, ref: RefObject<HTMLInputElement | null>): RadioAria {\n  let {\n    value,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    onPressUp,\n    onClick\n  } = props;\n\n  const isDisabled = props.isDisabled || state.isDisabled;\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel && process.env.NODE_ENV !== 'production') {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  let checked = state.selectedValue === value;\n\n  let onChange = (e) => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n\n  // Handle press state for keyboard interactions and cases where labelProps is not used.\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    onPressUp,\n    onClick,\n    isDisabled\n  });\n\n  // Handle press state on the label.\n  let {pressProps: labelProps, isPressed: isLabelPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPressUp,\n    onClick,\n    isDisabled,\n    onPress(e) {\n      onPress?.(e);\n      state.setSelectedValue(value);\n      ref.current?.focus();\n    }\n  });\n\n  let {focusableProps} = useFocusable(mergeProps(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n  let tabIndex: number | undefined = -1;\n  if (state.selectedValue != null) {\n    if (state.selectedValue === value) {\n      tabIndex = 0;\n    }\n  } else if (state.lastFocusedValue === value || state.lastFocusedValue == null) {\n    tabIndex = 0;\n  }\n  if (isDisabled) {\n    tabIndex = undefined;\n  }\n\n  let {name, form, descriptionId, errorMessageId, validationBehavior} = radioGroupData.get(state)!;\n  useFormReset(ref, state.defaultSelectedValue, state.setSelectedValue);\n  useFormValidation({validationBehavior}, state, ref);\n\n  return {\n    labelProps: mergeProps(\n      labelProps,\n      useMemo(() => ({\n        onClick: e => e.preventDefault(),\n\n        // Prevent label from being focused when mouse down on it.\n        // Note, this does not prevent the input from being focused in the `click` event.\n        onMouseDown: e => e.preventDefault()\n      }), [])),\n    inputProps: mergeProps(domProps, {\n      ...interactions,\n      type: 'radio',\n      name,\n      form,\n      tabIndex,\n      disabled: isDisabled,\n      required: state.isRequired && validationBehavior === 'native',\n      checked,\n      value,\n      onChange,\n      'aria-describedby': [\n        props['aria-describedby'],\n        state.isInvalid ? errorMessageId : null,\n        descriptionId\n      ].filter(Boolean).join(' ') || undefined\n    }),\n    isDisabled,\n    isSelected: checked,\n    isPressed: isPressed || isLabelPressed\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}