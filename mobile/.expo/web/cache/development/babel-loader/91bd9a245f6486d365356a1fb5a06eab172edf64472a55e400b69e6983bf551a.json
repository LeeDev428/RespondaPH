{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar $5450691d3629f6ea$exports = require(\"./useListState.main.js\");\nvar $9DRtv$reactstatelyutils = require(\"@react-stately/utils\");\nvar $9DRtv$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useSingleSelectListState\", function () {\n  return $b9e99587a092d199$export$e7f05e985daf4b5f;\n});\nfunction $b9e99587a092d199$export$e7f05e985daf4b5f(props) {\n  var _props_defaultSelectedKey;\n  var _ref = (0, $9DRtv$reactstatelyutils.useControlledState)(props.selectedKey, (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : null, props.onSelectionChange),\n    _ref2 = _slicedToArray(_ref, 2),\n    selectedKey = _ref2[0],\n    setSelectedKey = _ref2[1];\n  var selectedKeys = (0, $9DRtv$react.useMemo)(function () {\n    return selectedKey != null ? [selectedKey] : [];\n  }, [selectedKey]);\n  var _ref3 = (0, $5450691d3629f6ea$exports.useListState)(Object.assign({}, props, {\n      selectionMode: 'single',\n      disallowEmptySelection: true,\n      allowDuplicateSelectionEvents: true,\n      selectedKeys: selectedKeys,\n      onSelectionChange: function onSelectionChange(keys) {\n        if (keys === 'all') return;\n        var _keys_values_next_value;\n        var key = (_keys_values_next_value = keys.values().next().value) !== null && _keys_values_next_value !== void 0 ? _keys_values_next_value : null;\n        if (key === selectedKey && props.onSelectionChange) props.onSelectionChange(key);\n        setSelectedKey(key);\n      }\n    })),\n    collection = _ref3.collection,\n    disabledKeys = _ref3.disabledKeys,\n    selectionManager = _ref3.selectionManager;\n  var selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    selectedKey: selectedKey,\n    setSelectedKey: setSelectedKey,\n    selectedItem: selectedItem\n  };\n}","map":{"version":3,"names":["$b9e99587a092d199$export$e7f05e985daf4b5f","props","_props_defaultSelectedKey","_ref","$9DRtv$reactstatelyutils","useControlledState","selectedKey","defaultSelectedKey","onSelectionChange","_ref2","_slicedToArray","setSelectedKey","selectedKeys","$9DRtv$react","useMemo","_ref3","$5450691d3629f6ea$exports","useListState","Object","assign","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","keys","_keys_values_next_value","key","values","next","value","collection","disabledKeys","selectionManager","selectedItem","getItem"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\useSingleSelectListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionStateBase, Key, Node, Selection, SingleSelection} from '@react-types/shared';\nimport {ListState, useListState} from './useListState';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo} from 'react';\n\nexport interface SingleSelectListProps<T> extends CollectionStateBase<T>, Omit<SingleSelection, 'disallowEmptySelection'> {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface SingleSelectListState<T> extends ListState<T> {\n  /** The key for the currently selected item. */\n  readonly selectedKey: Key | null,\n\n  /** Sets the selected key. */\n  setSelectedKey(key: Key | null): void,\n\n  /** The value of the currently selected item. */\n  readonly selectedItem: Node<T> | null\n}\n\n/**\n * Provides state management for list-like components with single selection.\n * Handles building a collection of items from props, and manages selection state.\n */\nexport function useSingleSelectListState<T extends object>(props: SingleSelectListProps<T>): SingleSelectListState<T>  {\n  let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, props.defaultSelectedKey ?? null, props.onSelectionChange);\n  let selectedKeys = useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {collection, disabledKeys, selectionManager} = useListState({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys,\n    onSelectionChange: (keys: Selection) => {\n      // impossible, but TS doesn't know that\n      if (keys === 'all') {\n        return;\n      }\n      let key = keys.values().next().value ?? null;\n\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) {\n        props.onSelectionChange(key);\n      }\n\n      setSelectedKey(key);\n    }\n  });\n\n  let selectedItem = selectedKey != null\n    ? collection.getItem(selectedKey)\n    : null;\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;AAuCO,SAASA,0CAA2CC,KAA+B;MACdC,yBAAA;EAA1E,IAAAC,IAAA,GAAoC,IAAAC,wBAAA,CAAAC,kBAAiB,EAAEJ,KAAA,CAAMK,WAAW,EAAE,CAAAJ,yBAAA,GAAAD,KAAA,CAAMM,kBAAkB,cAAxBL,yBAAA,cAAAA,yBAAA,GAA4B,MAAMD,KAAA,CAAMO,iBAAiB;IAAAC,KAAA,GAAAC,cAAA,CAAAP,IAAA;IAA9HG,WAAA,GAAAG,KAAA;IAAaE,cAAA,GAAAF,KAAA;EAClB,IAAIG,YAAA,GAAe,IAAAC,YAAA,CAAAC,OAAM,EAAE;IAAA,OAAMR,WAAA,IAAe,OAAO,CAACA,WAAA,CAAY,GAAG,EAAE;EAAA,GAAE,CAACA,WAAA,CAAY;EACxF,IAAAS,KAAA,GAAmD,IAAAC,yBAAA,CAAAC,YAAW,EAAAC,MAAA,CAAAC,MAAA,KACzDlB,KAAK;MACRmB,aAAA,EAAe;MACfC,sBAAA,EAAwB;MACxBC,6BAAA,EAA+B;oBAC/BV,YAAA;MACAJ,iBAAA,EAAmB,SAAnBA,kBAAoBe,IAAA;QAElB,IAAIA,IAAA,KAAS,OACX;YAEQC,uBAAA;QAAV,IAAIC,GAAA,GAAM,CAAAD,uBAAA,GAAAD,IAAA,CAAKG,MAAM,GAAGC,IAAI,GAAGC,KAAK,cAA1BJ,uBAAA,cAAAA,uBAAA,GAA8B;QAIxC,IAAIC,GAAA,KAAQnB,WAAA,IAAeL,KAAA,CAAMO,iBAAiB,EAChDP,KAAA,CAAMO,iBAAiB,CAACiB,GAAA;QAG1Bd,cAAA,CAAec,GAAA;MACjB;IAAA,EACF;IArBKI,UAAU,GAAAd,KAAA,CAAXc,UAAA;IAAaC,YAAY,GAAAf,KAAA,CAAde,YAAA;IAAgBC,gBAAgB,GAAAhB,KAAA,CAAlBgB,gBAAA;EAuB7B,IAAIC,YAAA,GAAe1B,WAAA,IAAe,OAC9BuB,UAAA,CAAWI,OAAO,CAAC3B,WAAA,IACnB;EAEJ,OAAO;gBACLuB,UAAA;kBACAC,YAAA;sBACAC,gBAAA;iBACAzB,WAAA;oBACAK,cAAA;kBACAqB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}