{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar $62yjz$react = require(\"react\");\nvar $62yjz$reactstatelyutils = require(\"@react-stately/utils\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useOverlayTriggerState\", function () {\n  return $5076d97fb6884665$export$61c6a8c84e605fb6;\n});\nfunction $5076d97fb6884665$export$61c6a8c84e605fb6(props) {\n  var _ref = (0, $62yjz$reactstatelyutils.useControlledState)(props.isOpen, props.defaultOpen || false, props.onOpenChange),\n    _ref2 = _slicedToArray(_ref, 2),\n    isOpen = _ref2[0],\n    setOpen = _ref2[1];\n  var open = (0, $62yjz$react.useCallback)(function () {\n    setOpen(true);\n  }, [setOpen]);\n  var close = (0, $62yjz$react.useCallback)(function () {\n    setOpen(false);\n  }, [setOpen]);\n  var toggle = (0, $62yjz$react.useCallback)(function () {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n  return {\n    isOpen: isOpen,\n    setOpen: setOpen,\n    open: open,\n    close: close,\n    toggle: toggle\n  };\n}","map":{"version":3,"names":["$5076d97fb6884665$export$61c6a8c84e605fb6","props","_ref","$62yjz$reactstatelyutils","useControlledState","isOpen","defaultOpen","onOpenChange","_ref2","_slicedToArray","setOpen","open","$62yjz$react","useCallback","close","toggle"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-stately\\overlays\\dist\\packages\\@react-stately\\overlays\\src\\useOverlayTriggerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {OverlayTriggerProps} from '@react-types/overlays';\nimport {useCallback} from 'react';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface OverlayTriggerState {\n  /** Whether the overlay is currently open. */\n  readonly isOpen: boolean,\n  /** Sets whether the overlay is open. */\n  setOpen(isOpen: boolean): void,\n  /** Opens the overlay. */\n  open(): void,\n  /** Closes the overlay. */\n  close(): void,\n  /** Toggles the overlay's visibility. */\n  toggle(): void\n}\n\n/**\n * Manages state for an overlay trigger. Tracks whether the overlay is open, and provides\n * methods to toggle this state.\n */\nexport function useOverlayTriggerState(props: OverlayTriggerProps): OverlayTriggerState  {\n  let [isOpen, setOpen] = useControlledState(props.isOpen, props.defaultOpen || false, props.onOpenChange);\n\n  const open = useCallback(() => {\n    setOpen(true);\n  }, [setOpen]);\n\n  const close = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const toggle = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  return {\n    isOpen,\n    setOpen,\n    open,\n    close,\n    toggle\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;AAiCO,SAASA,0CAAuBC,KAA0B;EAC/D,IAAAC,IAAA,GAAwB,IAAAC,wBAAA,CAAAC,kBAAiB,EAAEH,KAAA,CAAMI,MAAM,EAAEJ,KAAA,CAAMK,WAAW,IAAI,OAAOL,KAAA,CAAMM,YAAY;IAAAC,KAAA,GAAAC,cAAA,CAAAP,IAAA;IAAlGG,MAAA,GAAAG,KAAA;IAAQE,OAAA,GAAAF,KAAA;EAEb,IAAMG,IAAA,GAAO,IAAAC,YAAA,CAAAC,WAAU,EAAE;IACvBH,OAAA,CAAQ;EACV,GAAG,CAACA,OAAA,CAAQ;EAEZ,IAAMI,KAAA,GAAQ,IAAAF,YAAA,CAAAC,WAAU,EAAE;IACxBH,OAAA,CAAQ;EACV,GAAG,CAACA,OAAA,CAAQ;EAEZ,IAAMK,MAAA,GAAS,IAAAH,YAAA,CAAAC,WAAU,EAAE;IACzBH,OAAA,CAAQ,CAACL,MAAA;EACX,GAAG,CAACK,OAAA,EAASL,MAAA,CAAO;EAEpB,OAAO;YACLA,MAAA;aACAK,OAAA;UACAC,IAAA;WACAG,KAAA;YACAC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}