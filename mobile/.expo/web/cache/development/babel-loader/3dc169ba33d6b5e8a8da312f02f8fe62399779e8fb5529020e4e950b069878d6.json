{"ast":null,"code":"var $08ef1685902b6011$exports = require(\"./ariaHideOutside.main.js\");\nvar $82711f9cb668ecdb$exports = require(\"./useOverlay.main.js\");\nvar $745edbb83ab4296f$exports = require(\"./Overlay.main.js\");\nvar $5c2f5cd01815d369$exports = require(\"./usePreventScroll.main.js\");\nvar $9ziDi$reactariautils = require(\"@react-aria/utils\");\nvar $9ziDi$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useModalOverlay\", function () {\n  return $11b7e0b04b421e95$export$dbc0f175b25fb0fb;\n});\nfunction $11b7e0b04b421e95$export$dbc0f175b25fb0fb(props, state, ref) {\n  var _ref = (0, $82711f9cb668ecdb$exports.useOverlay)(Object.assign({}, props, {\n      isOpen: state.isOpen,\n      onClose: state.close\n    }), ref),\n    overlayProps = _ref.overlayProps,\n    underlayProps = _ref.underlayProps;\n  (0, $5c2f5cd01815d369$exports.usePreventScroll)({\n    isDisabled: !state.isOpen\n  });\n  (0, $745edbb83ab4296f$exports.useOverlayFocusContain)();\n  (0, $9ziDi$react.useEffect)(function () {\n    if (state.isOpen && ref.current) return (0, $08ef1685902b6011$exports.ariaHideOutside)([ref.current], {\n      shouldUseInert: true\n    });\n  }, [state.isOpen, ref]);\n  return {\n    modalProps: (0, $9ziDi$reactariautils.mergeProps)(overlayProps),\n    underlayProps: underlayProps\n  };\n}","map":{"version":3,"names":["$11b7e0b04b421e95$export$dbc0f175b25fb0fb","props","state","ref","_ref","$82711f9cb668ecdb$exports","useOverlay","Object","assign","isOpen","onClose","close","overlayProps","underlayProps","$5c2f5cd01815d369$exports","usePreventScroll","isDisabled","$745edbb83ab4296f$exports","useOverlayFocusContain","$9ziDi$react","useEffect","current","$08ef1685902b6011$exports","ariaHideOutside","shouldUseInert","modalProps","$9ziDi$reactariautils","mergeProps"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\overlays\\dist\\packages\\@react-aria\\overlays\\src\\useModalOverlay.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ariaHideOutside} from './ariaHideOutside';\nimport {AriaOverlayProps, useOverlay} from './useOverlay';\nimport {DOMAttributes, RefObject} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {OverlayTriggerState} from '@react-stately/overlays';\nimport {useEffect} from 'react';\nimport {useOverlayFocusContain} from './Overlay';\nimport {usePreventScroll} from './usePreventScroll';\n\nexport interface AriaModalOverlayProps extends Pick<AriaOverlayProps, 'shouldCloseOnInteractOutside'> {\n  /**\n   * Whether to close the modal when the user interacts outside it.\n   * @default false\n   */\n  isDismissable?: boolean,\n  /**\n   * Whether pressing the escape key to close the modal should be disabled.\n   * @default false\n   */\n  isKeyboardDismissDisabled?: boolean\n}\n\nexport interface ModalOverlayAria {\n  /** Props for the modal element. */\n  modalProps: DOMAttributes,\n  /** Props for the underlay element. */\n  underlayProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a modal component.\n * A modal is an overlay element which blocks interaction with elements outside it.\n */\nexport function useModalOverlay(props: AriaModalOverlayProps, state: OverlayTriggerState, ref: RefObject<HTMLElement | null>): ModalOverlayAria {\n  let {overlayProps, underlayProps} = useOverlay({\n    ...props,\n    isOpen: state.isOpen,\n    onClose: state.close\n  }, ref);\n\n  usePreventScroll({\n    isDisabled: !state.isOpen\n  });\n\n  useOverlayFocusContain();\n\n  useEffect(() => {\n    if (state.isOpen && ref.current) {\n      return ariaHideOutside([ref.current], {shouldUseInert: true});\n    }\n  }, [state.isOpen, ref]);\n\n  return {\n    modalProps: mergeProps(overlayProps),\n    underlayProps\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AA6CO,SAASA,0CAAgBC,KAA4B,EAAEC,KAA0B,EAAEC,GAAkC;EAC1H,IAAAC,IAAA,GAAoC,IAAAC,yBAAA,CAAAC,UAAS,EAAAC,MAAA,CAAAC,MAAA,KACxCP,KAAK;MACRQ,MAAA,EAAQP,KAAA,CAAMO,MAAM;MACpBC,OAAA,EAASR,KAAA,CAAMS;IAAK,IACnBR,GAAA;IAJES,YAAY,GAAAR,IAAA,CAAbQ,YAAA;IAAeC,aAAa,GAAAT,IAAA,CAAfS,aAAA;EAMjB,IAAAC,yBAAA,CAAAC,gBAAe,EAAE;IACfC,UAAA,EAAY,CAACd,KAAA,CAAMO;EACrB;EAEA,IAAAQ,yBAAA,CAAAC,sBAAqB;EAErB,IAAAC,YAAA,CAAAC,SAAQ,EAAE;IACR,IAAIlB,KAAA,CAAMO,MAAM,IAAIN,GAAA,CAAIkB,OAAO,EAC7B,OAAO,IAAAC,yBAAA,CAAAC,eAAc,EAAE,CAACpB,GAAA,CAAIkB,OAAO,CAAC,EAAE;MAACG,cAAA,EAAgB;IAAI;EAE/D,GAAG,CAACtB,KAAA,CAAMO,MAAM,EAAEN,GAAA,CAAI;EAEtB,OAAO;IACLsB,UAAA,EAAY,IAAAC,qBAAA,CAAAC,UAAS,EAAEf,YAAA;mBACvBC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}