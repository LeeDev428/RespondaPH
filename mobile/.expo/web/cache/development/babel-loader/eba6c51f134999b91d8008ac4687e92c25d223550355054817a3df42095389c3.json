{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useListBox = useListBox;\nvar _utils = require(\"@react-aria/utils\");\nvar _utils2 = require(\"./utils\");\nvar _label = require(\"@react-aria/label\");\nvar _selection = require(\"@react-aria/selection\");\nvar _utils3 = require(\"@react-native-aria/utils\");\nfunction useListBox(props, state, ref) {\n  var domProps = (0, _utils.filterDOMProps)(props, {\n    labelable: true\n  });\n  var _useSelectableList = (0, _selection.useSelectableList)(Object.assign({}, props, {\n      ref: ref,\n      selectionManager: state.selectionManager,\n      collection: state.collection,\n      disabledKeys: state.disabledKeys\n    })),\n    listProps = _useSelectableList.listProps;\n  var id = (0, _utils.useId)(props.id);\n  _utils2.listIds.set(state, id);\n  var _useLabel = (0, _label.useLabel)(Object.assign({}, props, {\n      id: id,\n      labelElementType: 'span'\n    })),\n    _labelProps = _useLabel.labelProps,\n    fieldProps = _useLabel.fieldProps;\n  var labelProps = (0, _utils3.mapDomPropsToRN)(_labelProps);\n  var _listBoxProps = (0, _utils.mergeProps)(domProps, state.selectionManager.selectionMode === 'multiple' ? {\n    'aria-multiselectable': 'true'\n  } : {}, Object.assign({\n    role: 'listbox'\n  }, (0, _utils.mergeProps)(fieldProps, listProps)));\n  var listBoxProps = (0, _utils3.useMapDomPropsToRN)(_listBoxProps, ref);\n  return {\n    labelProps: labelProps,\n    listBoxProps: listBoxProps\n  };\n}","map":{"version":3,"names":["_utils","require","_utils2","_label","_selection","_utils3","useListBox","props","state","ref","domProps","filterDOMProps","labelable","_useSelectableList","useSelectableList","Object","assign","selectionManager","collection","disabledKeys","listProps","id","useId","listIds","set","_useLabel","useLabel","labelElementType","_labelProps","labelProps","fieldProps","mapDomPropsToRN","_listBoxProps","mergeProps","selectionMode","role","listBoxProps","useMapDomPropsToRN"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-native-aria\\listbox\\src\\useListBox.web.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { AriaListBoxProps } from '@react-types/listbox';\nimport { filterDOMProps, mergeProps } from '@react-aria/utils';\nimport { HTMLAttributes, ReactNode, RefObject } from 'react';\nimport { KeyboardDelegate } from '@react-types/shared';\nimport { listIds } from './utils';\nimport { ListState } from '@react-stately/list';\nimport { useId } from '@react-aria/utils';\nimport { useLabel } from '@react-aria/label';\nimport { useSelectableList } from '@react-aria/selection';\nimport { mapDomPropsToRN, useMapDomPropsToRN } from '@react-native-aria/utils';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>;\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>;\n}\n\ninterface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean;\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode;\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(\n  props: AriaListBoxOptions<T>,\n  state: ListState<T>,\n  ref: RefObject<HTMLElement>\n): ListBoxAria {\n  let domProps = filterDOMProps(props, { labelable: true });\n  let { listProps } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n  });\n\n  let id = useId(props.id);\n  listIds.set(state, id);\n\n  let { labelProps: _labelProps, fieldProps } = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span',\n  });\n\n  const labelProps = mapDomPropsToRN(_labelProps);\n\n  const _listBoxProps = mergeProps(\n    domProps,\n    state.selectionManager.selectionMode === 'multiple'\n      ? {\n          'aria-multiselectable': 'true',\n        }\n      : {},\n    {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps),\n    }\n  );\n\n  const listBoxProps = useMapDomPropsToRN(_listBoxProps, ref);\n\n  return {\n    labelProps,\n    listBoxProps,\n  };\n}\n"],"mappings":";;;;AAaA,IAAAA,MAAA,GAAAC,OAAA;AAGA,IAAAC,OAAA,GAAAD,OAAA;AAGA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,UAAA,GAAAH,OAAA;AACA,IAAAI,OAAA,GAAAJ,OAAA;AA+BO,SAASK,UAAUA,CACxBC,KAA4B,EAC5BC,KAAmB,EACnBC,GAA2B,EACd;EACb,IAAIC,QAAQ,GAAG,IAAAC,qBAAc,EAACJ,KAAK,EAAE;IAAEK,SAAS,EAAE;EAAK,CAAC,CAAC;EACzD,IAAAC,kBAAA,GAAoB,IAAAC,4BAAiB,EAAAC,MAAA,CAAAC,MAAA,KAChCT,KAAK;MACRE,GAAG,EAAHA,GAAG;MACHQ,gBAAgB,EAAET,KAAK,CAACS,gBAAgB;MACxCC,UAAU,EAAEV,KAAK,CAACU,UAAU;MAC5BC,YAAY,EAAEX,KAAK,CAACW;IAAA,EACrB,CAAC;IANIC,SAAA,GAAAP,kBAAA,CAAAO,SAAA;EAQN,IAAIC,EAAE,GAAG,IAAAC,YAAK,EAACf,KAAK,CAACc,EAAE,CAAC;EACxBE,eAAO,CAACC,GAAG,CAAChB,KAAK,EAAEa,EAAE,CAAC;EAEtB,IAAAI,SAAA,GAA8C,IAAAC,eAAQ,EAAAX,MAAA,CAAAC,MAAA,KACjDT,KAAK;MACRc,EAAE,EAAFA,EAAE;MAGFM,gBAAgB,EAAE;IAAA,EACnB,CAAC;IANgBC,WAAW,GAAAH,SAAA,CAAvBI,UAAU;IAAeC,UAAA,GAAAL,SAAA,CAAAK,UAAA;EAQ/B,IAAMD,UAAU,GAAG,IAAAE,uBAAe,EAACH,WAAW,CAAC;EAE/C,IAAMI,aAAa,GAAG,IAAAC,iBAAU,EAC9BvB,QAAQ,EACRF,KAAK,CAACS,gBAAgB,CAACiB,aAAa,KAAK,UAAU,GAC/C;IACE,sBAAsB,EAAE;EAC1B,CAAC,GACD,CAAC,CAAC,EAAAnB,MAAA,CAAAC,MAAA;IAEJmB,IAAI,EAAE;EAAS,GACZ,IAAAF,iBAAU,EAACH,UAAU,EAAEV,SAAS,EAEvC,CAAC;EAED,IAAMgB,YAAY,GAAG,IAAAC,0BAAkB,EAACL,aAAa,EAAEvB,GAAG,CAAC;EAE3D,OAAO;IACLoB,UAAU,EAAVA,UAAU;IACVO,YAAA,EAAAA;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}