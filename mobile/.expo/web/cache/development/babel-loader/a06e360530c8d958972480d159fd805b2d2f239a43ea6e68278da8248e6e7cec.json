{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSliderState = useSliderState;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\nvar _utils = require(\"@react-stately/utils\");\nvar _utils2 = require(\"@react-aria/utils\");\nvar $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MIN_VALUE = 0;\nvar $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MAX_VALUE = 100;\nvar $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_STEP_VALUE = 1;\nfunction useSliderState(props) {\n  var _props$defaultValue;\n  var isDisabled = props.isDisabled,\n    _props$minValue = props.minValue,\n    minValue = _props$minValue === void 0 ? $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MIN_VALUE : _props$minValue,\n    _props$maxValue = props.maxValue,\n    maxValue = _props$maxValue === void 0 ? $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MAX_VALUE : _props$maxValue,\n    formatter = props.numberFormatter,\n    _props$step = props.step,\n    step = _props$step === void 0 ? $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_STEP_VALUE : _props$step;\n  var _useControlledState = (0, _utils.useControlledState)(props.value, (_props$defaultValue = props.defaultValue) != null ? _props$defaultValue : [minValue], props.onChange),\n    _useControlledState2 = (0, _slicedToArray2.default)(_useControlledState, 2),\n    values = _useControlledState2[0],\n    setValues = _useControlledState2[1];\n  var _useState = (0, _react.useState)(new Array(values.length).fill(false)),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    isDraggings = _useState2[0],\n    setDraggings = _useState2[1];\n  var isEditablesRef = (0, _react.useRef)(new Array(values.length).fill(true));\n  var _useState3 = (0, _react.useState)(undefined),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    focusedIndex = _useState4[0],\n    setFocusedIndex = _useState4[1];\n  var valuesRef = (0, _react.useRef)(null);\n  valuesRef.current = values;\n  var isDraggingsRef = (0, _react.useRef)(null);\n  isDraggingsRef.current = isDraggings;\n  function getValuePercent(value) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n  function getThumbMinValue(index) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n  function isThumbEditable(index) {\n    return isEditablesRef.current[index];\n  }\n  function setThumbEditable(index, editable) {\n    isEditablesRef.current[index] = editable;\n  }\n  function updateValue(index, value) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    var thisMin = getThumbMinValue(index);\n    var thisMax = getThumbMaxValue(index);\n    value = (0, _utils2.snapValueToStep)(value, thisMin, thisMax, step);\n    valuesRef.current = $dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n  function updateDragging(index, dragging) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    var wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = $dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      props.onChangeEnd(valuesRef.current);\n    }\n  }\n  function getFormattedValue(value) {\n    return formatter.format(value);\n  }\n  function setThumbPercent(index, percent) {\n    updateValue(index, getPercentValue(percent));\n  }\n  function getRoundedValue(value) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n  function getPercentValue(percent) {\n    var val = percent * (maxValue - minValue) + minValue;\n    return (0, _utils2.clamp)(getRoundedValue(val), minValue, maxValue);\n  }\n  return {\n    values: values,\n    getThumbValue: function getThumbValue(index) {\n      return values[index];\n    },\n    setThumbValue: updateValue,\n    setThumbPercent: setThumbPercent,\n    isThumbDragging: function isThumbDragging(index) {\n      return isDraggings[index];\n    },\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: function getThumbPercent(index) {\n      return getValuePercent(values[index]);\n    },\n    getValuePercent: getValuePercent,\n    getThumbValueLabel: function getThumbValueLabel(index) {\n      return getFormattedValue(values[index]);\n    },\n    getFormattedValue: getFormattedValue,\n    getThumbMinValue: getThumbMinValue,\n    getThumbMaxValue: getThumbMaxValue,\n    getPercentValue: getPercentValue,\n    isThumbEditable: isThumbEditable,\n    setThumbEditable: setThumbEditable,\n    step: step\n  };\n}\nfunction $dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(array, index, value) {\n  if (array[index] === value) {\n    return array;\n  }\n  return [].concat((0, _toConsumableArray2.default)(array.slice(0, index)), [value], (0, _toConsumableArray2.default)(array.slice(index + 1)));\n}","map":{"version":3,"names":["$dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MIN_VALUE","$dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MAX_VALUE","$dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_STEP_VALUE","useSliderState","props","_props$defaultValue","isDisabled","_props$minValue","minValue","_props$maxValue","maxValue","formatter","numberFormatter","_props$step","step","_useControlledState","useControlledState","value","defaultValue","onChange","_useControlledState2","_slicedToArray2","default","values","setValues","_useState","useState","Array","length","fill","_useState2","isDraggings","setDraggings","isEditablesRef","useRef","_useState3","undefined","_useState4","focusedIndex","setFocusedIndex","valuesRef","current","isDraggingsRef","getValuePercent","getThumbMinValue","index","getThumbMaxValue","isThumbEditable","setThumbEditable","editable","updateValue","thisMin","thisMax","snapValueToStep","$dcc38d2f5fc04b76254f325fa36d$var$replaceIndex","updateDragging","dragging","wasDragging","onChangeEnd","some","Boolean","getFormattedValue","format","setThumbPercent","percent","getPercentValue","getRoundedValue","Math","round","val","clamp","getThumbValue","setThumbValue","isThumbDragging","setThumbDragging","focusedThumb","setFocusedThumb","getThumbPercent","getThumbValueLabel","replaceIndex","array","concat","_toConsumableArray2","slice"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-stately\\slider\\dist\\packages\\@react-stately\\slider\\src\\useSliderState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep} from '@react-aria/utils';\nimport {SliderProps} from '@react-types/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef, useState} from 'react';\n\nexport interface SliderState {\n  /**\n   * Values managed by the slider by thumb index.\n   */\n  readonly values: number[],\n  /**\n   * Get the value for the specified thumb.\n   * @param index\n   */\n  getThumbValue(index: number): number,\n\n  /**\n   * Sets the value for the specified thumb.\n   * The actual value set will be clamped and rounded according to min/max/step.\n   * @param index\n   * @param value\n   */\n  setThumbValue(index: number, value: number): void,\n\n  /**\n   * Sets value for the specified thumb by percent offset (between 0 and 1).\n   * @param index\n   * @param percent\n   */\n  setThumbPercent(index: number, percent: number): void,\n\n  /**\n   * Whether the specific thumb is being dragged.\n   * @param index\n   */\n  isThumbDragging(index: number): boolean,\n  /**\n   * Set is dragging on the specified thumb.\n   * @param index\n   * @param dragging\n   */\n  setThumbDragging(index: number, dragging: boolean): void,\n\n  /**\n   * Currently-focused thumb index.\n   */\n  readonly focusedThumb: number | undefined,\n  /**\n   * Set focused true on specified thumb. This will remove focus from\n   * any thumb that had it before.\n   * @param index\n   */\n  setFocusedThumb(index: number | undefined): void,\n\n  /**\n   * Returns the specified thumb's value as a percentage from 0 to 1.\n   * @param index\n   */\n  getThumbPercent(index: number): number,\n\n  /**\n   * Returns the value as a percent between the min and max of the slider.\n   * @param index\n   */\n  getValuePercent(value: number): number,\n\n  /**\n   * Returns the string label for the specified thumb's value, per props.formatOptions.\n   * @param index\n   */\n  getThumbValueLabel(index: number): string,\n\n  /**\n   * Returns the string label for the value, per props.formatOptions.\n   * @param index\n   */\n  getFormattedValue(value: number): string,\n\n  /**\n   * Returns the min allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMinValue(index: number): number,\n\n  /**\n   * Returns the max allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMaxValue(index: number): number,\n\n  /**\n   * Converts a percent along track (between 0 and 1) to the corresponding value.\n   * @param percent\n   */\n  getPercentValue(percent: number): number,\n\n  /**\n   * Returns if the specified thumb is editable.\n   * @param index\n   */\n  isThumbEditable(index: number): boolean,\n\n  /**\n   * Set the specified thumb's editable state.\n   * @param index\n   * @param editable\n   */\n  setThumbEditable(index: number, editable: boolean): void,\n\n  /**\n   * The step amount for the slider.\n   */\n  readonly step: number\n}\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP_VALUE = 1;\n\ninterface SliderStateOptions extends SliderProps {\n  numberFormatter: Intl.NumberFormat\n}\n\n/**\n * Provides state management for a slider component. Stores values for all thumbs,\n * formats values for localization, and provides methods to update the position\n * of any thumbs.\n * @param props\n */\nexport function useSliderState(props: SliderStateOptions): SliderState {\n  const {isDisabled, minValue = DEFAULT_MIN_VALUE, maxValue = DEFAULT_MAX_VALUE, numberFormatter: formatter, step = DEFAULT_STEP_VALUE} = props;\n\n  const [values, setValues] = useControlledState<number[]>(\n    props.value as any,\n    props.defaultValue ?? [minValue] as any,\n    props.onChange as any\n  );\n  const [isDraggings, setDraggings] = useState<boolean[]>(new Array(values.length).fill(false));\n  const isEditablesRef = useRef<boolean[]>(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = useState<number | undefined>(undefined);\n\n  const valuesRef = useRef<number[]>(null);\n  valuesRef.current = values;\n  const isDraggingsRef = useRef<boolean[]>(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value: number) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index: number) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index: number) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index: number) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index: number, editable: boolean) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index: number, value: number) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index);\n\n    // Round value to multiple of step, clamp value between min and max\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index: number, dragging: boolean) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    // Call onChangeEnd if no handles are dragging.\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      props.onChangeEnd(valuesRef.current);\n    }\n  }\n\n  function getFormattedValue(value: number) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index: number, percent: number) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value: number) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent: number) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  return {\n    values: values,\n    getThumbValue: (index: number) => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent,\n    isThumbDragging: (index: number) => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: (index: number) => getValuePercent(values[index]),\n    getValuePercent,\n    getThumbValueLabel: (index: number) => getFormattedValue(values[index]),\n    getFormattedValue,\n    getThumbMinValue,\n    getThumbMaxValue,\n    getPercentValue,\n    isThumbEditable,\n    setThumbEditable,\n    step\n  };\n}\n\nfunction replaceIndex<T>(array: T[], index: number, value: T) {\n  if (array[index] === value) {\n    return array;\n  }\n\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}