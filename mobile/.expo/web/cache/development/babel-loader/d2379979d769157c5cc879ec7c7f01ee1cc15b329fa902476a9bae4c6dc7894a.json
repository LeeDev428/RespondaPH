{"ast":null,"code":"var $815e346b11b84016$exports = require(\"./utils.main.js\");\nvar $byVdR$reactariautils = require(\"@react-aria/utils\");\nvar $byVdR$reactstatelycollections = require(\"@react-stately/collections\");\nvar $byVdR$reactariainteractions = require(\"@react-aria/interactions\");\nvar $byVdR$react = require(\"react\");\nvar $byVdR$reactariaselection = require(\"@react-aria/selection\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useMenuItem\", function () {\n  return $38191ed02615ec07$export$9d32628fc2aea7da;\n});\nfunction $38191ed02615ec07$export$9d32628fc2aea7da(props, state, ref) {\n  var id = props.id,\n    key = props.key,\n    closeOnSelect = props.closeOnSelect,\n    isVirtualized = props.isVirtualized,\n    hasPopup = props['aria-haspopup'],\n    onPressStart = props.onPressStart,\n    pressUpProp = props.onPressUp,\n    onPress = props.onPress,\n    pressChangeProp = props.onPressChange,\n    onPressEnd = props.onPressEnd,\n    onClickProp = props.onClick,\n    hoverStartProp = props.onHoverStart,\n    onHoverChange = props.onHoverChange,\n    onHoverEnd = props.onHoverEnd,\n    _onKeyDown = props.onKeyDown,\n    onKeyUp = props.onKeyUp,\n    onFocus = props.onFocus,\n    onFocusChange = props.onFocusChange,\n    onBlur = props.onBlur,\n    _props$selectionManag = props.selectionManager,\n    selectionManager = _props$selectionManag === void 0 ? state.selectionManager : _props$selectionManag;\n  var isTrigger = !!hasPopup;\n  var isTriggerExpanded = isTrigger && props['aria-expanded'] === 'true';\n  var _props_isDisabled;\n  var isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : selectionManager.isDisabled(key);\n  var _props_isSelected;\n  var isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : selectionManager.isSelected(key);\n  var data = (0, $815e346b11b84016$exports.menuData).get(state);\n  var item = state.collection.getItem(key);\n  var onClose = props.onClose || data.onClose;\n  var router = (0, $byVdR$reactariautils.useRouter)();\n  var performAction = function performAction() {\n    var _item_props;\n    if (isTrigger) return;\n    if (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.onAction) item.props.onAction();else if (props.onAction) props.onAction(key);\n    if (data.onAction) {\n      var onAction = data.onAction;\n      onAction(key);\n    }\n  };\n  var role = 'menuitem';\n  if (!isTrigger) {\n    if (selectionManager.selectionMode === 'single') role = 'menuitemradio';else if (selectionManager.selectionMode === 'multiple') role = 'menuitemcheckbox';\n  }\n  var labelId = (0, $byVdR$reactariautils.useSlotId)();\n  var descriptionId = (0, $byVdR$reactariautils.useSlotId)();\n  var keyboardId = (0, $byVdR$reactariautils.useSlotId)();\n  var ariaProps = {\n    id: id,\n    'aria-disabled': isDisabled || undefined,\n    role: role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined,\n    'aria-controls': props['aria-controls'],\n    'aria-haspopup': hasPopup,\n    'aria-expanded': props['aria-expanded']\n  };\n  if (selectionManager.selectionMode !== 'none' && !isTrigger) ariaProps['aria-checked'] = isSelected;\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = item === null || item === void 0 ? void 0 : item.index;\n    ariaProps['aria-setsize'] = (0, $byVdR$reactstatelycollections.getItemCount)(state.collection);\n  }\n  var isPressedRef = (0, $byVdR$react.useRef)(false);\n  var onPressChange = function onPressChange(isPressed) {\n    pressChangeProp === null || pressChangeProp === void 0 ? void 0 : pressChangeProp(isPressed);\n    isPressedRef.current = isPressed;\n  };\n  var interaction = (0, $byVdR$react.useRef)(null);\n  var onPressUp = function onPressUp(e) {\n    if (e.pointerType !== 'keyboard') interaction.current = {\n      pointerType: e.pointerType\n    };\n    if (e.pointerType === 'mouse') {\n      if (!isPressedRef.current) e.target.click();\n    }\n    pressUpProp === null || pressUpProp === void 0 ? void 0 : pressUpProp(e);\n  };\n  var onClick = function onClick(e) {\n    var _interaction_current, _interaction_current1;\n    onClickProp === null || onClickProp === void 0 ? void 0 : onClickProp(e);\n    performAction();\n    (0, $byVdR$reactariautils.handleLinkClick)(e, router, item.props.href, item === null || item === void 0 ? void 0 : item.props.routerOptions);\n    var shouldClose = ((_interaction_current = interaction.current) === null || _interaction_current === void 0 ? void 0 : _interaction_current.pointerType) === 'keyboard' ? ((_interaction_current1 = interaction.current) === null || _interaction_current1 === void 0 ? void 0 : _interaction_current1.key) === 'Enter' || selectionManager.selectionMode === 'none' || selectionManager.isLink(key) : selectionManager.selectionMode !== 'multiple' || selectionManager.isLink(key);\n    shouldClose = closeOnSelect !== null && closeOnSelect !== void 0 ? closeOnSelect : shouldClose;\n    if (onClose && !isTrigger && shouldClose) onClose();\n    interaction.current = null;\n  };\n  var _ref = (0, $byVdR$reactariaselection.useSelectableItem)({\n      id: id,\n      selectionManager: selectionManager,\n      key: key,\n      ref: ref,\n      shouldSelectOnPressUp: true,\n      allowsDifferentPressOrigin: true,\n      linkBehavior: 'none',\n      shouldUseVirtualFocus: data.shouldUseVirtualFocus\n    }),\n    itemProps = _ref.itemProps,\n    isFocused = _ref.isFocused;\n  var _ref2 = (0, $byVdR$reactariainteractions.usePress)({\n      onPressStart: onPressStart,\n      onPress: onPress,\n      onPressUp: onPressUp,\n      onPressChange: onPressChange,\n      onPressEnd: onPressEnd,\n      isDisabled: isDisabled\n    }),\n    pressProps = _ref2.pressProps,\n    isPressed = _ref2.isPressed;\n  var _ref3 = (0, $byVdR$reactariainteractions.useHover)({\n      isDisabled: isDisabled,\n      onHoverStart: function onHoverStart(e) {\n        if (!(0, $byVdR$reactariainteractions.isFocusVisible)() && !(isTriggerExpanded && hasPopup)) {\n          selectionManager.setFocused(true);\n          selectionManager.setFocusedKey(key);\n        }\n        hoverStartProp === null || hoverStartProp === void 0 ? void 0 : hoverStartProp(e);\n      },\n      onHoverChange: onHoverChange,\n      onHoverEnd: onHoverEnd\n    }),\n    hoverProps = _ref3.hoverProps;\n  var _ref4 = (0, $byVdR$reactariainteractions.useKeyboard)({\n      onKeyDown: function onKeyDown(e) {\n        if (e.repeat) {\n          e.continuePropagation();\n          return;\n        }\n        switch (e.key) {\n          case ' ':\n            interaction.current = {\n              pointerType: 'keyboard',\n              key: ' '\n            };\n            e.target.click();\n            break;\n          case 'Enter':\n            interaction.current = {\n              pointerType: 'keyboard',\n              key: 'Enter'\n            };\n            if (e.target.tagName !== 'A') e.target.click();\n            break;\n          default:\n            if (!isTrigger) e.continuePropagation();\n            _onKeyDown === null || _onKeyDown === void 0 ? void 0 : _onKeyDown(e);\n            break;\n        }\n      },\n      onKeyUp: onKeyUp\n    }),\n    keyboardProps = _ref4.keyboardProps;\n  var _ref5 = (0, $byVdR$reactariainteractions.useFocus)({\n      onBlur: onBlur,\n      onFocus: onFocus,\n      onFocusChange: onFocusChange\n    }),\n    focusProps = _ref5.focusProps;\n  var domProps = (0, $byVdR$reactariautils.filterDOMProps)(item === null || item === void 0 ? void 0 : item.props);\n  delete domProps.id;\n  var linkProps = (0, $byVdR$reactariautils.useLinkProps)(item === null || item === void 0 ? void 0 : item.props);\n  return {\n    menuItemProps: Object.assign({}, ariaProps, (0, $byVdR$reactariautils.mergeProps)(domProps, linkProps, isTrigger ? {\n      onFocus: itemProps.onFocus,\n      'data-collection': itemProps['data-collection'],\n      'data-key': itemProps['data-key']\n    } : itemProps, pressProps, hoverProps, keyboardProps, focusProps, data.shouldUseVirtualFocus || isTrigger ? {\n      onMouseDown: function onMouseDown(e) {\n        return e.preventDefault();\n      }\n    } : undefined, isDisabled ? undefined : {\n      onClick: onClick\n    }), {\n      tabIndex: itemProps.tabIndex != null && isTriggerExpanded && !data.shouldUseVirtualFocus ? -1 : itemProps.tabIndex\n    }),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    },\n    isFocused: isFocused,\n    isFocusVisible: isFocused && selectionManager.isFocused && (0, $byVdR$reactariainteractions.isFocusVisible)() && !isTriggerExpanded,\n    isSelected: isSelected,\n    isPressed: isPressed,\n    isDisabled: isDisabled\n  };\n}","map":{"version":3,"names":["$38191ed02615ec07$export$9d32628fc2aea7da","props","state","ref","id","key","closeOnSelect","isVirtualized","hasPopup","onPressStart","pressUpProp","onPressUp","onPress","pressChangeProp","onPressChange","onPressEnd","onClickProp","onClick","hoverStartProp","onHoverStart","onHoverChange","onHoverEnd","onKeyDown","onKeyUp","onFocus","onFocusChange","onBlur","_props$selectionManag","selectionManager","isTrigger","isTriggerExpanded","_props_isDisabled","isDisabled","_props_isSelected","isSelected","data","$815e346b11b84016$exports","menuData","get","item","collection","getItem","onClose","router","$byVdR$reactariautils","useRouter","performAction","_item_props","onAction","role","selectionMode","labelId","useSlotId","descriptionId","keyboardId","ariaProps","undefined","filter","Boolean","join","index","$byVdR$reactstatelycollections","getItemCount","isPressedRef","$byVdR$react","useRef","isPressed","current","interaction","e","pointerType","target","click","_interaction_current","_interaction_current1","handleLinkClick","href","routerOptions","shouldClose","isLink","_ref","$byVdR$reactariaselection","useSelectableItem","shouldSelectOnPressUp","allowsDifferentPressOrigin","linkBehavior","shouldUseVirtualFocus","itemProps","isFocused","_ref2","$byVdR$reactariainteractions","usePress","pressProps","_ref3","useHover","isFocusVisible","setFocused","setFocusedKey","hoverProps","_ref4","useKeyboard","repeat","continuePropagation","tagName","keyboardProps","_ref5","useFocus","focusProps","domProps","filterDOMProps","linkProps","useLinkProps","menuItemProps","Object","assign","mergeProps","onMouseDown","preventDefault","tabIndex","labelProps","descriptionProps","keyboardShortcutProps"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useMenuItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, DOMProps, FocusableElement, FocusEvents, HoverEvents, Key, KeyboardEvents, PressEvent, PressEvents, RefObject} from '@react-types/shared';\nimport {filterDOMProps, handleLinkClick, mergeProps, useLinkProps, useRouter, useSlotId} from '@react-aria/utils';\nimport {getItemCount} from '@react-stately/collections';\nimport {isFocusVisible, useFocus, useHover, useKeyboard, usePress} from '@react-aria/interactions';\nimport {menuData} from './utils';\nimport {MouseEvent, useRef} from 'react';\nimport {SelectionManager} from '@react-stately/selection';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableItem} from '@react-aria/selection';\n\nexport interface MenuItemAria {\n  /** Props for the menu item element. */\n  menuItemProps: DOMAttributes,\n\n  /** Props for the main text element inside the menu item. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the menu item, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Props for the keyboard shortcut text element inside the item, if any. */\n  keyboardShortcutProps: DOMAttributes,\n\n  /** Whether the item is currently focused. */\n  isFocused: boolean,\n  /** Whether the item is keyboard focused. */\n  isFocusVisible: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is disabled. */\n  isDisabled: boolean\n}\n\nexport interface AriaMenuItemProps extends DOMProps, PressEvents, HoverEvents, KeyboardEvents, FocusEvents  {\n  /**\n   * Whether the menu item is disabled.\n   * @deprecated - pass disabledKeys to useTreeState instead.\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the menu item is selected.\n   * @deprecated - pass selectedKeys to useTreeState instead.\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the menu item. */\n  'aria-label'?: string,\n\n  /** The unique key for the menu item. */\n  key: Key,\n\n  /**\n   * Handler that is called when the menu should close after selecting an item.\n   * @deprecated - pass to the menu instead.\n   */\n  onClose?: () => void,\n\n  /**\n   * Whether the menu should close when the menu item is selected.\n   * @default true\n   */\n  closeOnSelect?: boolean,\n\n  /** Whether the menu item is contained in a virtual scrolling menu. */\n  isVirtualized?: boolean,\n\n  /**\n   * Handler that is called when the user activates the item.\n   * @deprecated - pass to the menu instead.\n   */\n  onAction?: (key: Key) => void,\n\n  /** What kind of popup the item opens. */\n  'aria-haspopup'?: 'menu' | 'dialog',\n\n  /** Indicates whether the menu item's popup element is expanded or collapsed. */\n  'aria-expanded'?: boolean | 'true' | 'false',\n\n  /** Identifies the menu item's popup element whose contents or presence is controlled by the menu item. */\n  'aria-controls'?: string,\n\n  /** Override of the selection manager. By default, `state.selectionManager` is used. */\n  selectionManager?: SelectionManager\n}\n\n/**\n * Provides the behavior and accessibility implementation for an item in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the item.\n * @param state - State for the menu, as returned by `useTreeState`.\n */\nexport function useMenuItem<T>(props: AriaMenuItemProps, state: TreeState<T>, ref: RefObject<FocusableElement | null>): MenuItemAria {\n  let {\n    id,\n    key,\n    closeOnSelect,\n    isVirtualized,\n    'aria-haspopup': hasPopup,\n    onPressStart,\n    onPressUp: pressUpProp,\n    onPress,\n    onPressChange: pressChangeProp,\n    onPressEnd,\n    onClick: onClickProp,\n    onHoverStart: hoverStartProp,\n    onHoverChange,\n    onHoverEnd,\n    onKeyDown,\n    onKeyUp,\n    onFocus,\n    onFocusChange,\n    onBlur,\n    selectionManager = state.selectionManager\n  } = props;\n\n  let isTrigger = !!hasPopup;\n  let isTriggerExpanded = isTrigger && props['aria-expanded'] === 'true';\n  let isDisabled = props.isDisabled ?? selectionManager.isDisabled(key);\n  let isSelected = props.isSelected ?? selectionManager.isSelected(key);\n  let data = menuData.get(state)!;\n  let item = state.collection.getItem(key);\n  let onClose = props.onClose || data.onClose;\n  let router = useRouter();\n  let performAction = () => {\n    if (isTrigger) {\n      return;\n    }\n\n    if (item?.props?.onAction) {\n      item.props.onAction();\n    } else if (props.onAction) {\n      props.onAction(key);\n    }\n\n    if (data.onAction) {\n      // Must reassign to variable otherwise `this` binding gets messed up. Something to do with WeakMap.\n      let onAction = data.onAction;\n      onAction(key);\n    }\n  };\n\n  let role = 'menuitem';\n  if (!isTrigger) {\n    if (selectionManager.selectionMode === 'single') {\n      role = 'menuitemradio';\n    } else if (selectionManager.selectionMode === 'multiple') {\n      role = 'menuitemcheckbox';\n    }\n  }\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n  let keyboardId = useSlotId();\n\n  let ariaProps = {\n    id,\n    'aria-disabled': isDisabled || undefined,\n    role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined,\n    'aria-controls': props['aria-controls'],\n    'aria-haspopup': hasPopup,\n    'aria-expanded': props['aria-expanded']\n  };\n\n  if (selectionManager.selectionMode !== 'none' && !isTrigger) {\n    ariaProps['aria-checked'] = isSelected;\n  }\n\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = item?.index;\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let isPressedRef = useRef(false);\n  let onPressChange = (isPressed: boolean) => {\n    pressChangeProp?.(isPressed);\n    isPressedRef.current = isPressed;\n  };\n\n  let interaction = useRef<{pointerType: string, key?: string} | null>(null);\n  let onPressUp = (e: PressEvent) => {\n    if (e.pointerType !== 'keyboard') {\n      interaction.current = {pointerType: e.pointerType};\n    }\n\n    // If interacting with mouse, allow the user to mouse down on the trigger button,\n    // drag, and release over an item (matching native behavior).\n    if (e.pointerType === 'mouse') {\n      if (!isPressedRef.current) {\n        (e.target as HTMLElement).click();\n      }\n    }\n\n    pressUpProp?.(e);\n  };\n\n  let onClick = (e: MouseEvent<FocusableElement>) => {\n    onClickProp?.(e);\n    performAction();\n    handleLinkClick(e, router, item!.props.href, item?.props.routerOptions);\n\n    let shouldClose = interaction.current?.pointerType === 'keyboard'\n      // Always close when pressing Enter key, or if item is not selectable.\n      ? interaction.current?.key === 'Enter' || selectionManager.selectionMode === 'none' || selectionManager.isLink(key)\n      // Close except if multi-select is enabled.\n      : selectionManager.selectionMode !== 'multiple' || selectionManager.isLink(key);\n    \n    shouldClose = closeOnSelect ?? shouldClose;\n    if (onClose && !isTrigger && shouldClose) {\n      onClose();\n    }\n\n    interaction.current = null;\n  };\n\n  let {itemProps, isFocused} = useSelectableItem({\n    id,\n    selectionManager: selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp: true,\n    allowsDifferentPressOrigin: true,\n    // Disable all handling of links in useSelectable item\n    // because we handle it ourselves. The behavior of menus\n    // is slightly different from other collections because\n    // actions are performed on key down rather than key up.\n    linkBehavior: 'none',\n    shouldUseVirtualFocus: data.shouldUseVirtualFocus\n  });\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPress,\n    onPressUp,\n    onPressChange,\n    onPressEnd,\n    isDisabled\n  });\n  let {hoverProps} = useHover({\n    isDisabled,\n    onHoverStart(e) {\n      // Hovering over an already expanded sub dialog trigger should keep focus in the dialog.\n      if (!isFocusVisible() && !(isTriggerExpanded && hasPopup)) {\n        selectionManager.setFocused(true);\n        selectionManager.setFocusedKey(key);\n      }\n      hoverStartProp?.(e);\n    },\n    onHoverChange,\n    onHoverEnd\n  });\n\n  let {keyboardProps} = useKeyboard({\n    onKeyDown: (e) => {\n      // Ignore repeating events, which may have started on the menu trigger before moving\n      // focus to the menu item. We want to wait for a second complete key press sequence.\n      if (e.repeat) {\n        e.continuePropagation();\n        return;\n      }\n\n      switch (e.key) {\n        case ' ':\n          interaction.current = {pointerType: 'keyboard', key: ' '};\n          (e.target as HTMLElement).click();\n          break;\n        case 'Enter':\n          interaction.current = {pointerType: 'keyboard', key: 'Enter'};\n\n          // Trigger click unless this is a link. Links trigger click natively.\n          if ((e.target as HTMLElement).tagName !== 'A') {\n            (e.target as HTMLElement).click();\n          }\n          break;\n        default:\n          if (!isTrigger) {\n            e.continuePropagation();\n          }\n\n          onKeyDown?.(e);\n          break;\n      }\n    },\n    onKeyUp\n  });\n\n  let {focusProps} = useFocus({onBlur, onFocus, onFocusChange});\n  let domProps = filterDOMProps(item?.props);\n  delete domProps.id;\n  let linkProps = useLinkProps(item?.props);\n\n  return {\n    menuItemProps: {\n      ...ariaProps,\n      ...mergeProps(\n        domProps,\n        linkProps,\n        isTrigger \n          ? {onFocus: itemProps.onFocus, 'data-collection': itemProps['data-collection'], 'data-key': itemProps['data-key']} \n          : itemProps,\n        pressProps,\n        hoverProps,\n        keyboardProps,\n        focusProps,\n        // Prevent DOM focus from moving on mouse down when using virtual focus or this is a submenu/subdialog trigger.\n        data.shouldUseVirtualFocus || isTrigger ? {onMouseDown: e => e.preventDefault()} : undefined,\n        isDisabled ? undefined : {onClick}\n      ),\n      // If a submenu is expanded, set the tabIndex to -1 so that shift tabbing goes out of the menu instead of the parent menu item.\n      tabIndex: itemProps.tabIndex != null && isTriggerExpanded && !data.shouldUseVirtualFocus ? -1 : itemProps.tabIndex\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    },\n    isFocused,\n    isFocusVisible: isFocused && selectionManager.isFocused && isFocusVisible() && !isTriggerExpanded,\n    isSelected,\n    isPressed,\n    isDisabled\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AA0GO,SAASA,0CAAeC,KAAwB,EAAEC,KAAmB,EAAEC,GAAuC;EACnH,IACEC,EAAE,GAoBAH,KAAA,CArBAG,EAAA;IAEFC,GAAG,GAmBDJ,KAAA,CApBAI,GAAA;IAEFC,aAAa,GAkBXL,KAAA,CAnBCK,aAAA;IAEHC,aAAa,GAiBXN,KAAA,CAlBWM,aAAA;IAEIC,QAAQ,GAgBvBP,KAAA,CAhBF;IACAQ,YAAY,GAeVR,KAAA,CAhBuBQ,YAAA;IAEdC,WAAW,GAcpBT,KAAA,CAdFU,SAAA;IACAC,OAAO,GAaLX,KAAA,CAdoBW,OAAA;IAEPC,eAAe,GAY5BZ,KAAA,CAZFa,aAAA;IACAC,UAAU,GAWRd,KAAA,CAZ4Bc,UAAA;IAErBC,WAAW,GAUlBf,KAAA,CAVFgB,OAAA;IACcC,cAAc,GAS1BjB,KAAA,CATFkB,YAAA;IACAC,aAAa,GAQXnB,KAAA,CAT0BmB,aAAA;IAE5BC,UAAU,GAORpB,KAAA,CARWoB,UAAA;IAEbC,UAAS,GAMPrB,KAAA,CAPQqB,SAAA;IAEVC,OAAO,GAKLtB,KAAA,CANOsB,OAAA;IAETC,OAAO,GAILvB,KAAA,CALKuB,OAAA;IAEPC,aAAa,GAGXxB,KAAA,CAJKwB,aAAA;IAEPC,MAAM,GAEJzB,KAAA,CAHWyB,MAAA;IAAAC,qBAAA,GAGX1B,KAAA,CAFI2B,gBAAA;IACNA,gBAAA,GAAAD,qBAAA,cAAmBzB,KAAA,CAAM0B,gBAAgB,GAAAD,qBAAA;EAG3C,IAAIE,SAAA,GAAY,CAAC,CAACrB,QAAA;EAClB,IAAIsB,iBAAA,GAAoBD,SAAA,IAAa5B,KAAK,CAAC,gBAAgB,KAAK;MAC/C8B,iBAAA;EAAjB,IAAIC,UAAA,GAAa,CAAAD,iBAAA,GAAA9B,KAAA,CAAM+B,UAAU,cAAhBD,iBAAA,cAAAA,iBAAA,GAAoBH,gBAAA,CAAiBI,UAAU,CAAC3B,GAAA;MAChD4B,iBAAA;EAAjB,IAAIC,UAAA,GAAa,CAAAD,iBAAA,GAAAhC,KAAA,CAAMiC,UAAU,cAAhBD,iBAAA,cAAAA,iBAAA,GAAoBL,gBAAA,CAAiBM,UAAU,CAAC7B,GAAA;EACjE,IAAI8B,IAAA,GAAO,IAAAC,yBAAA,CAAAC,QAAO,EAAEC,GAAG,CAACpC,KAAA;EACxB,IAAIqC,IAAA,GAAOrC,KAAA,CAAMsC,UAAU,CAACC,OAAO,CAACpC,GAAA;EACpC,IAAIqC,OAAA,GAAUzC,KAAA,CAAMyC,OAAO,IAAIP,IAAA,CAAKO,OAAO;EAC3C,IAAIC,MAAA,GAAS,IAAAC,qBAAA,CAAAC,SAAQ;EACrB,IAAIC,aAAA,GAAgB,SAAhBA,cAAA,EAAgB;QAKdC,WAAA;IAJJ,IAAIlB,SAAA,EACF;IAGF,IAAIU,IAAA,aAAAA,IAAA,wBAAAQ,WAAA,GAAAR,IAAA,CAAMtC,KAAK,cAAX8C,WAAA,uBAAAA,WAAA,CAAaC,QAAQ,EACvBT,IAAA,CAAKtC,KAAK,CAAC+C,QAAQ,QACd,IAAI/C,KAAA,CAAM+C,QAAQ,EACvB/C,KAAA,CAAM+C,QAAQ,CAAC3C,GAAA;IAGjB,IAAI8B,IAAA,CAAKa,QAAQ,EAAE;MAEjB,IAAIA,QAAA,GAAWb,IAAA,CAAKa,QAAQ;MAC5BA,QAAA,CAAS3C,GAAA;IACX;EACF;EAEA,IAAI4C,IAAA,GAAO;EACX,IAAI,CAACpB,SAAA,EAAW;IACd,IAAID,gBAAA,CAAiBsB,aAAa,KAAK,UACrCD,IAAA,GAAO,qBACF,IAAIrB,gBAAA,CAAiBsB,aAAa,KAAK,YAC5CD,IAAA,GAAO;EAEX;EAEA,IAAIE,OAAA,GAAU,IAAAP,qBAAA,CAAAQ,SAAQ;EACtB,IAAIC,aAAA,GAAgB,IAAAT,qBAAA,CAAAQ,SAAQ;EAC5B,IAAIE,UAAA,GAAa,IAAAV,qBAAA,CAAAQ,SAAQ;EAEzB,IAAIG,SAAA,GAAY;QACdnD,EAAA;IACA,iBAAiB4B,UAAA,IAAcwB,SAAA;UAC/BP,IAAA;IACA,cAAchD,KAAK,CAAC,aAAa;IACjC,mBAAmBkD,OAAA;IACnB,oBAAoB,CAACE,aAAA,EAAeC,UAAA,CAAW,CAACG,MAAM,CAACC,OAAA,EAASC,IAAI,CAAC,QAAQH,SAAA;IAC7E,iBAAiBvD,KAAK,CAAC,gBAAgB;IACvC,iBAAiBO,QAAA;IACjB,iBAAiBP,KAAK,CAAC;EACzB;EAEA,IAAI2B,gBAAA,CAAiBsB,aAAa,KAAK,UAAU,CAACrB,SAAA,EAChD0B,SAAS,CAAC,eAAe,GAAGrB,UAAA;EAG9B,IAAI3B,aAAA,EAAe;IACjBgD,SAAS,CAAC,gBAAgB,GAAGhB,IAAA,aAAAA,IAAA,uBAAAA,IAAA,CAAMqB,KAAK;IACxCL,SAAS,CAAC,eAAe,GAAG,IAAAM,8BAAA,CAAAC,YAAW,EAAE5D,KAAA,CAAMsC,UAAU;EAC3D;EAEA,IAAIuB,YAAA,GAAe,IAAAC,YAAA,CAAAC,MAAK,EAAE;EAC1B,IAAInD,aAAA,GAAgB,SAAhBA,cAAiBoD,SAAA;IACnBrD,eAAA,aAAAA,eAAA,uBAAAA,eAAA,CAAkBqD,SAAA;IAClBH,YAAA,CAAaI,OAAO,GAAGD,SAAA;EACzB;EAEA,IAAIE,WAAA,GAAc,IAAAJ,YAAA,CAAAC,MAAK,EAA8C;EACrE,IAAItD,SAAA,GAAY,SAAZA,UAAa0D,CAAA;IACf,IAAIA,CAAA,CAAEC,WAAW,KAAK,YACpBF,WAAA,CAAYD,OAAO,GAAG;MAACG,WAAA,EAAaD,CAAA,CAAEC;IAAW;IAKnD,IAAID,CAAA,CAAEC,WAAW,KAAK,SACpB;MAAA,IAAI,CAACP,YAAA,CAAaI,OAAO,EACvBE,CAAC,CAAEE,MAAM,CAAiBC,KAAK;IACjC;IAGF9D,WAAA,aAAAA,WAAA,uBAAAA,WAAA,CAAc2D,CAAA;EAChB;EAEA,IAAIpD,OAAA,GAAU,SAAVA,QAAWoD,CAAA;QAKKI,oBAAA,EAEdC,qBAAA;IANJ1D,WAAA,aAAAA,WAAA,uBAAAA,WAAA,CAAcqD,CAAA;IACdvB,aAAA;IACA,IAAAF,qBAAA,CAAA+B,eAAc,EAAEN,CAAA,EAAG1B,MAAA,EAAQJ,IAAA,CAAMtC,KAAK,CAAC2E,IAAI,EAAErC,IAAA,aAAAA,IAAA,uBAAAA,IAAA,CAAMtC,KAAK,CAAC4E,aAAa;IAEtE,IAAIC,WAAA,GAAc,EAAAL,oBAAA,GAAAL,WAAA,CAAYD,OAAO,cAAnBM,oBAAA,uBAAAA,oBAAA,CAAqBH,WAAW,MAAK,aAEnD,EAAAI,qBAAA,GAAAN,WAAA,CAAYD,OAAO,cAAnBO,qBAAA,uBAAAA,qBAAA,CAAqBrE,GAAG,MAAK,WAAWuB,gBAAA,CAAiBsB,aAAa,KAAK,UAAUtB,gBAAA,CAAiBmD,MAAM,CAAC1E,GAAA,IAE7GuB,gBAAA,CAAiBsB,aAAa,KAAK,cAActB,gBAAA,CAAiBmD,MAAM,CAAC1E,GAAA;IAE7EyE,WAAA,GAAcxE,aAAA,aAAAA,aAAA,cAAAA,aAAA,GAAiBwE,WAAA;IAC/B,IAAIpC,OAAA,IAAW,CAACb,SAAA,IAAaiD,WAAA,EAC3BpC,OAAA;IAGF0B,WAAA,CAAYD,OAAO,GAAG;EACxB;EAEA,IAAAa,IAAA,GAA6B,IAAAC,yBAAA,CAAAC,iBAAgB,EAAE;UAC7C9E,EAAA;MACAwB,gBAAA,EAAkBA,gBAAA;WAClBvB,GAAA;WACAF,GAAA;MACAgF,qBAAA,EAAuB;MACvBC,0BAAA,EAA4B;MAK5BC,YAAA,EAAc;MACdC,qBAAA,EAAuBnD,IAAA,CAAKmD;IAC9B;IAbKC,SAAS,GAAAP,IAAA,CAAVO,SAAA;IAAYC,SAAS,GAAAR,IAAA,CAAXQ,SAAA;EAed,IAAAC,KAAA,GAA8B,IAAAC,4BAAA,CAAAC,QAAO,EAAE;oBACrClF,YAAA;eACAG,OAAA;iBACAD,SAAA;qBACAG,aAAA;kBACAC,UAAA;kBACAiB;IACF;IAPK4D,UAAU,GAAAH,KAAA,CAAXG,UAAA;IAAa1B,SAAS,GAAAuB,KAAA,CAAXvB,SAAA;EAQf,IAAA2B,KAAA,GAAmB,IAAAH,4BAAA,CAAAI,QAAO,EAAE;kBAC1B9D,UAAA;MACAb,YAAA,WAAAA,aAAakD,CAAC;QAEZ,IAAI,CAAC,IAAAqB,4BAAA,CAAAK,cAAa,OAAO,EAAEjE,iBAAA,IAAqBtB,QAAO,GAAI;UACzDoB,gBAAA,CAAiBoE,UAAU,CAAC;UAC5BpE,gBAAA,CAAiBqE,aAAa,CAAC5F,GAAA;QACjC;QACAa,cAAA,aAAAA,cAAA,uBAAAA,cAAA,CAAiBmD,CAAA;MACnB;qBACAjD,aAAA;kBACAC;IACF;IAZK6E,UAAU,GAAAL,KAAA,CAAXK,UAAA;EAcJ,IAAAC,KAAA,GAAsB,IAAAT,4BAAA,CAAAU,WAAU,EAAE;MAChC9E,SAAA,EAAW,SAAXA,UAAY+C,CAAA;QAGV,IAAIA,CAAA,CAAEgC,MAAM,EAAE;UACZhC,CAAA,CAAEiC,mBAAmB;UACrB;QACF;QAEA,QAAQjC,CAAA,CAAEhE,GAAG;UACX,KAAK;YACH+D,WAAA,CAAYD,OAAO,GAAG;cAACG,WAAA,EAAa;cAAYjE,GAAA,EAAK;YAAG;YACvDgE,CAAA,CAAEE,MAAM,CAAiBC,KAAK;YAC/B;UACF,KAAK;YACHJ,WAAA,CAAYD,OAAO,GAAG;cAACG,WAAA,EAAa;cAAYjE,GAAA,EAAK;YAAO;YAG5D,IAAIgE,CAAC,CAAEE,MAAM,CAAiBgC,OAAO,KAAK,KACxClC,CAAC,CAAEE,MAAM,CAAiBC,KAAK;YAEjC;UACF;YACE,IAAI,CAAC3C,SAAA,EACHwC,CAAA,CAAEiC,mBAAmB;YAGvBhF,UAAA,aAAAA,UAAA,uBAAAA,UAAA,CAAY+C,CAAA;YACZ;QACJ;MACF;eACA9C;IACF;IAhCKiF,aAAa,GAAAL,KAAA,CAAdK,aAAA;EAkCJ,IAAAC,KAAA,GAAmB,IAAAf,4BAAA,CAAAgB,QAAO,EAAE;cAAChF,MAAA;eAAQF,OAAA;qBAASC;IAAa;IAAtDkF,UAAU,GAAAF,KAAA,CAAXE,UAAA;EACJ,IAAIC,QAAA,GAAW,IAAAhE,qBAAA,CAAAiE,cAAa,EAAEtE,IAAA,aAAAA,IAAA,uBAAAA,IAAA,CAAMtC,KAAK;EACzC,OAAO2G,QAAA,CAASxG,EAAE;EAClB,IAAI0G,SAAA,GAAY,IAAAlE,qBAAA,CAAAmE,YAAW,EAAExE,IAAA,aAAAA,IAAA,uBAAAA,IAAA,CAAMtC,KAAK;EAExC,OAAO;IACL+G,aAAA,EAAAC,MAAA,CAAAC,MAAA,KACK3D,SAAS,EACT,IAAAX,qBAAA,CAAAuE,UAAS,EACVP,QAAA,EACAE,SAAA,EACAjF,SAAA,GACI;MAACL,OAAA,EAAS+D,SAAA,CAAU/D,OAAO;MAAE,mBAAmB+D,SAAS,CAAC,kBAAkB;MAAE,YAAYA,SAAS,CAAC;IAAW,IAC/GA,SAAA,EACJK,UAAA,EACAM,UAAA,EACAM,aAAA,EACAG,UAAA,EAEAxE,IAAA,CAAKmD,qBAAqB,IAAIzD,SAAA,GAAY;MAACuF,WAAA,EAAa,SAAbA,YAAa/C,CAAA;QAAA,OAAKA,CAAA,CAAEgD,cAAc;MAAA;IAAE,IAAI7D,SAAA,EACnFxB,UAAA,GAAawB,SAAA,GAAY;eAACvC;IAAO,EAClC;MAEDqG,QAAA,EAAU/B,SAAA,CAAU+B,QAAQ,IAAI,QAAQxF,iBAAA,IAAqB,CAACK,IAAA,CAAKmD,qBAAqB,GAAG,KAAKC,SAAA,CAAU+B;IAAQ,EACpH;IACAC,UAAA,EAAY;MACVnH,EAAA,EAAI+C;IACN;IACAqE,gBAAA,EAAkB;MAChBpH,EAAA,EAAIiD;IACN;IACAoE,qBAAA,EAAuB;MACrBrH,EAAA,EAAIkD;IACN;eACAkC,SAAA;IACAO,cAAA,EAAgBP,SAAA,IAAa5D,gBAAA,CAAiB4D,SAAS,IAAI,IAAAE,4BAAA,CAAAK,cAAa,OAAO,CAACjE,iBAAA;gBAChFI,UAAA;eACAgC,SAAA;gBACAlC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}