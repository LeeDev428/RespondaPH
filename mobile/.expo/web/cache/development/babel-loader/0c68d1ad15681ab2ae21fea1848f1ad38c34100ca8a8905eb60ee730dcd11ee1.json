{"ast":null,"code":"var $87beb89ab4a308fd$exports = require(\"./utils.main.js\");\nvar $eCULP$reactariautils = require(\"@react-aria/utils\");\nvar $eCULP$reactariainteractions = require(\"@react-aria/interactions\");\nvar $eCULP$reactarialabel = require(\"@react-aria/label\");\nvar $eCULP$reactariaselection = require(\"@react-aria/selection\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useListBox\", function () {\n  return $a3ce5bb3074610af$export$50eacbbf140a3141;\n});\nfunction $a3ce5bb3074610af$export$50eacbbf140a3141(props, state, ref) {\n  var domProps = (0, $eCULP$reactariautils.filterDOMProps)(props, {\n    labelable: true\n  });\n  var selectionBehavior = props.selectionBehavior || 'toggle';\n  var linkBehavior = props.linkBehavior || (selectionBehavior === 'replace' ? 'action' : 'override');\n  if (selectionBehavior === 'toggle' && linkBehavior === 'action') linkBehavior = 'override';\n  var _ref = (0, $eCULP$reactariaselection.useSelectableList)(Object.assign({}, props, {\n      ref: ref,\n      selectionManager: state.selectionManager,\n      collection: state.collection,\n      disabledKeys: state.disabledKeys,\n      linkBehavior: linkBehavior\n    })),\n    listProps = _ref.listProps;\n  var _ref2 = (0, $eCULP$reactariainteractions.useFocusWithin)({\n      onFocusWithin: props.onFocus,\n      onBlurWithin: props.onBlur,\n      onFocusWithinChange: props.onFocusChange\n    }),\n    focusWithinProps = _ref2.focusWithinProps;\n  var id = (0, $eCULP$reactariautils.useId)(props.id);\n  (0, $87beb89ab4a308fd$exports.listData).set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction,\n    linkBehavior: linkBehavior,\n    UNSTABLE_itemBehavior: props['UNSTABLE_itemBehavior']\n  });\n  var _ref3 = (0, $eCULP$reactarialabel.useLabel)(Object.assign({}, props, {\n      id: id,\n      labelElementType: 'span'\n    })),\n    labelProps = _ref3.labelProps,\n    fieldProps = _ref3.fieldProps;\n  return {\n    labelProps: labelProps,\n    listBoxProps: (0, $eCULP$reactariautils.mergeProps)(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, Object.assign({\n      role: 'listbox'\n    }, (0, $eCULP$reactariautils.mergeProps)(fieldProps, listProps)))\n  };\n}","map":{"version":3,"names":["$a3ce5bb3074610af$export$50eacbbf140a3141","props","state","ref","domProps","$eCULP$reactariautils","filterDOMProps","labelable","selectionBehavior","linkBehavior","_ref","$eCULP$reactariaselection","useSelectableList","Object","assign","selectionManager","collection","disabledKeys","listProps","_ref2","$eCULP$reactariainteractions","useFocusWithin","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","focusWithinProps","id","useId","$87beb89ab4a308fd$exports","listData","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","onAction","UNSTABLE_itemBehavior","_ref3","$eCULP$reactarialabel","useLabel","labelElementType","labelProps","fieldProps","listBoxProps","mergeProps","selectionMode","role"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useListBox.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {DOMAttributes, KeyboardDelegate, LayoutDelegate, RefObject} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: DOMAttributes,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: DOMAttributes\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * A delegate object that provides layout information for items in the collection.\n   * By default this uses the DOM, but this can be overridden to implement things like\n   * virtualized scrolling.\n   */\n  layoutDelegate?: LayoutDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * @default 'override'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement | null>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  // Use props instead of state here. We don't want this to change due to long press.\n  let selectionBehavior = props.selectionBehavior || 'toggle';\n  let linkBehavior = props.linkBehavior || (selectionBehavior === 'replace' ? 'action' : 'override');\n  if (selectionBehavior === 'toggle' && linkBehavior === 'action') {\n    // linkBehavior=\"action\" does not work with selectionBehavior=\"toggle\" because there is no way\n    // to initiate selection (checkboxes are not allowed inside a listbox). Link items will not be\n    // selectable in this configuration.\n    linkBehavior = 'override';\n  }\n\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    linkBehavior\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction,\n    linkBehavior,\n    // @ts-ignore\n    UNSTABLE_itemBehavior: props['UNSTABLE_itemBehavior']\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAkEO,SAASA,0CAAcC,KAA4B,EAAEC,KAAmB,EAAEC,GAAkC;EACjH,IAAIC,QAAA,GAAW,IAAAC,qBAAA,CAAAC,cAAa,EAAEL,KAAA,EAAO;IAACM,SAAA,EAAW;EAAI;EAErD,IAAIC,iBAAA,GAAoBP,KAAA,CAAMO,iBAAiB,IAAI;EACnD,IAAIC,YAAA,GAAeR,KAAA,CAAMQ,YAAY,KAAKD,iBAAA,KAAsB,YAAY,WAAW,UAAS;EAChG,IAAIA,iBAAA,KAAsB,YAAYC,YAAA,KAAiB,UAIrDA,YAAA,GAAe;EAGjB,IAAAC,IAAA,GAAkB,IAAAC,yBAAA,CAAAC,iBAAgB,EAAAC,MAAA,CAAAC,MAAA,KAC7Bb,KAAK;WACRE,GAAA;MACAY,gBAAA,EAAkBb,KAAA,CAAMa,gBAAgB;MACxCC,UAAA,EAAYd,KAAA,CAAMc,UAAU;MAC5BC,YAAA,EAAcf,KAAA,CAAMe,YAAY;oBAChCR;IAAA,EACF;IAPKS,SAAS,GAAAR,IAAA,CAAVQ,SAAA;EASJ,IAAAC,KAAA,GAAyB,IAAAC,4BAAA,CAAAC,cAAa,EAAE;MACtCC,aAAA,EAAerB,KAAA,CAAMsB,OAAO;MAC5BC,YAAA,EAAcvB,KAAA,CAAMwB,MAAM;MAC1BC,mBAAA,EAAqBzB,KAAA,CAAM0B;IAC7B;IAJKC,gBAAgB,GAAAT,KAAA,CAAjBS,gBAAA;EAOJ,IAAIC,EAAA,GAAK,IAAAxB,qBAAA,CAAAyB,KAAI,EAAE7B,KAAA,CAAM4B,EAAE;EACvB,IAAAE,yBAAA,CAAAC,QAAO,EAAEC,GAAG,CAAC/B,KAAA,EAAO;QAClB2B,EAAA;IACAK,qBAAA,EAAuBjC,KAAA,CAAMiC,qBAAqB;IAClDC,qBAAA,EAAuBlC,KAAA,CAAMkC,qBAAqB;IAClDC,kBAAA,EAAoBnC,KAAA,CAAMmC,kBAAkB;IAC5CC,aAAA,EAAepC,KAAA,CAAMoC,aAAa;IAClCC,QAAA,EAAUrC,KAAA,CAAMqC,QAAQ;kBACxB7B,YAAA;IAEA8B,qBAAA,EAAuBtC,KAAK,CAAC;EAC/B;EAEA,IAAAuC,KAAA,GAA+B,IAAAC,qBAAA,CAAAC,QAAO,EAAA7B,MAAA,CAAAC,MAAA,KACjCb,KAAK;UACR4B,EAAA;MAGAc,gBAAA,EAAkB;IAAA,EACpB;IANKC,UAAU,GAAAJ,KAAA,CAAXI,UAAA;IAAaC,UAAU,GAAAL,KAAA,CAAZK,UAAA;EAQf,OAAO;gBACLD,UAAA;IACAE,YAAA,EAAc,IAAAzC,qBAAA,CAAA0C,UAAS,EAAE3C,QAAA,EAAUwB,gBAAA,EAAkB1B,KAAA,CAAMa,gBAAgB,CAACiC,aAAa,KAAK,aAAa;MACzG,wBAAwB;IAC1B,IAAI,CAAC,GAAAnC,MAAA,CAAAC,MAAA;MACHmC,IAAA,EAAM;IAAA,GACH,IAAA5C,qBAAA,CAAA0C,UAAS,EAAEF,UAAA,EAAY3B,SAAA,CAAU,CACtC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}