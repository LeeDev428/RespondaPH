{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useRadioGroupState = useRadioGroupState;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\nvar _utils = require(\"@react-stately/utils\");\nvar $eaf77ba5e143129c6bb329a6e66020d3$var$instance = Math.round(Math.random() * 10000000000);\nvar $eaf77ba5e143129c6bb329a6e66020d3$var$i = 0;\nfunction useRadioGroupState(props) {\n  var name = (0, _react.useMemo)(function () {\n    return props.name || \"radio-group-\" + $eaf77ba5e143129c6bb329a6e66020d3$var$instance + \"-\" + ++$eaf77ba5e143129c6bb329a6e66020d3$var$i;\n  }, [props.name]);\n  var _useControlledState = (0, _utils.useControlledState)(props.value, props.defaultValue, props.onChange),\n    _useControlledState2 = (0, _slicedToArray2.default)(_useControlledState, 2),\n    selectedValue = _useControlledState2[0],\n    setSelected = _useControlledState2[1];\n  var _useState = (0, _react.useState)(null),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    lastFocusedValue = _useState2[0],\n    setLastFocusedValue = _useState2[1];\n  var setSelectedValue = function setSelectedValue(value) {\n    if (!props.isReadOnly) {\n      setSelected(value);\n    }\n  };\n  return {\n    name: name,\n    selectedValue: selectedValue,\n    setSelectedValue: setSelectedValue,\n    lastFocusedValue: lastFocusedValue,\n    setLastFocusedValue: setLastFocusedValue\n  };\n}","map":{"version":3,"names":["$eaf77ba5e143129c6bb329a6e66020d3$var$instance","Math","round","random","$eaf77ba5e143129c6bb329a6e66020d3$var$i","useRadioGroupState","props","name","useMemo","_useControlledState","useControlledState","value","defaultValue","onChange","_useControlledState2","_slicedToArray2","default","selectedValue","setSelected","_useState","useState","_useState2","lastFocusedValue","setLastFocusedValue","setSelectedValue","isReadOnly"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-stately\\radio\\dist\\packages\\@react-stately\\radio\\src\\useRadioGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupProps} from '@react-types/radio';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\n\nexport interface RadioGroupState {\n  /**\n   * The name for the group, used for native form submission.\n   * @deprecated\n   * @private\n   */\n  readonly name: string,\n\n  /** The currently selected value. */\n  readonly selectedValue: string | null,\n\n  /** Sets the selected value. */\n  setSelectedValue(value: string): void,\n\n  /** The value of the last focused radio. */\n  readonly lastFocusedValue: string | null,\n\n  /** Sets the last focused value. */\n  setLastFocusedValue(value: string): void\n}\n\nlet instance = Math.round(Math.random() * 10000000000);\nlet i = 0;\n\n/**\n * Provides state management for a radio group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useRadioGroupState(props: RadioGroupProps): RadioGroupState  {\n  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.\n  let name = useMemo(() => props.name || `radio-group-${instance}-${++i}`, [props.name]);\n  let [selectedValue, setSelected] = useControlledState(props.value, props.defaultValue, props.onChange);\n  let [lastFocusedValue, setLastFocusedValue] = useState(null);\n\n  let setSelectedValue = (value) => {\n    if (!props.isReadOnly) {\n      setSelected(value);\n    }\n  };\n\n  return {\n    name,\n    selectedValue,\n    setSelectedValue,\n    lastFocusedValue,\n    setLastFocusedValue\n  };\n}\n"],"mappings":";;;;;;;;AAqCA,IAAIA,8CAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,WAA3B,CAAf;AACA,IAAIC,uCAAC,GAAG,CAAR;AAMO,SAASC,kBAATA,CAA4BC,KAA5B,EAAsE;EAE3E,IAAIC,IAAI,GAAG,IAAAC,cAAO,EAAC;IAAA,OAAMF,KAAK,CAACC,IAAN,qBAA6BP,8CAA7B,SAAyC,EAAEI,uCAAlD;EAAA,GAAuD,CAACE,KAAK,CAACC,IAAP,CAAvD,CAAlB;EACA,IAAAE,mBAAA,GAAmC,IAAAC,yBAAkB,EAACJ,KAAK,CAACK,KAAP,EAAcL,KAAK,CAACM,YAApB,EAAkCN,KAAK,CAACO,QAAxC,CAArD;IAAAC,oBAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAP,mBAAA;IAAKQ,aAAD,GAAAH,oBAAA;IAAgBI,WAAhB,GAAAJ,oBAAA;EACJ,IAAAK,SAAA,GAA8C,IAAAC,eAAQ,EAAC,IAAD,CAAtD;IAAAC,UAAA,OAAAN,eAAA,CAAAC,OAAA,EAAAG,SAAA;IAAKG,gBAAD,GAAAD,UAAA;IAAmBE,mBAAnB,GAAAF,UAAA;EAEJ,IAAIG,gBAAgB,GAAI,SAApBA,gBAAgBA,CAAIb,KAAD,EAAW;IAChC,IAAI,CAACL,KAAK,CAACmB,UAAX,EAAuB;MACrBP,WAAW,CAACP,KAAD,CAAX;IACD;EACF,CAJD;EAMA,OAAO;IACLJ,IADK,EACLA,IADK;IAELU,aAFK,EAELA,aAFK;IAGLO,gBAHK,EAGLA,gBAHK;IAILF,gBAJK,EAILA,gBAJK;IAKLC,mBAAA,EAAAA;EALK,CAAP;AAOD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}