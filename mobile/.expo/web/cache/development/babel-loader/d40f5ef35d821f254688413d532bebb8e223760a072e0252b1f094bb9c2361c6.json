{"ast":null,"code":"var _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"shouldFocusWrap\", \"onKeyDown\", \"onKeyUp\"];\nvar $815e346b11b84016$exports = require(\"./utils.main.js\");\nvar $6CumN$reactariautils = require(\"@react-aria/utils\");\nvar $6CumN$reactariaselection = require(\"@react-aria/selection\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useMenu\", function () {\n  return $a3815f0132802737$export$38eaa17faae8f579;\n});\nfunction $a3815f0132802737$export$38eaa17faae8f579(props, state, ref) {\n  var _props$shouldFocusWra = props.shouldFocusWrap,\n    shouldFocusWrap = _props$shouldFocusWra === void 0 ? true : _props$shouldFocusWra,\n    onKeyDown = props.onKeyDown,\n    onKeyUp = props.onKeyUp,\n    otherProps = _objectWithoutProperties(props, _excluded);\n  if (!props['aria-label'] && !props['aria-labelledby'] && process.env.NODE_ENV !== 'production') console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  var domProps = (0, $6CumN$reactariautils.filterDOMProps)(props, {\n    labelable: true\n  });\n  var _ref = (0, $6CumN$reactariaselection.useSelectableList)(Object.assign({}, otherProps, {\n      ref: ref,\n      selectionManager: state.selectionManager,\n      collection: state.collection,\n      disabledKeys: state.disabledKeys,\n      shouldFocusWrap: shouldFocusWrap,\n      linkBehavior: 'override'\n    })),\n    listProps = _ref.listProps;\n  (0, $815e346b11b84016$exports.menuData).set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus\n  });\n  return {\n    menuProps: (0, $6CumN$reactariautils.mergeProps)(domProps, {\n      onKeyDown: onKeyDown,\n      onKeyUp: onKeyUp\n    }, Object.assign({\n      role: 'menu'\n    }, listProps, {\n      onKeyDown: function onKeyDown(e) {\n        var _listProps_onKeyDown;\n        if (e.key !== 'Escape' || props.shouldUseVirtualFocus) (_listProps_onKeyDown = listProps.onKeyDown) === null || _listProps_onKeyDown === void 0 ? void 0 : _listProps_onKeyDown.call(listProps, e);\n      }\n    }))\n  };\n}","map":{"version":3,"names":["$a3815f0132802737$export$38eaa17faae8f579","props","state","ref","_props$shouldFocusWra","shouldFocusWrap","onKeyDown","onKeyUp","otherProps","_objectWithoutProperties","_excluded","process","env","NODE_ENV","console","warn","domProps","$6CumN$reactariautils","filterDOMProps","labelable","_ref","$6CumN$reactariaselection","useSelectableList","Object","assign","selectionManager","collection","disabledKeys","linkBehavior","listProps","$815e346b11b84016$exports","menuData","set","onClose","onAction","shouldUseVirtualFocus","menuProps","mergeProps","role","e","_listProps_onKeyDown","key","call"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useMenu.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuProps} from '@react-types/menu';\nimport {DOMAttributes, KeyboardDelegate, KeyboardEvents, RefObject} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {menuData} from './utils';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface MenuAria {\n  /** Props for the menu element. */\n  menuProps: DOMAttributes\n}\n\nexport interface AriaMenuOptions<T> extends Omit<AriaMenuProps<T>, 'children'>, KeyboardEvents {\n  /** Whether the menu uses virtual scrolling. */\n  isVirtualized?: boolean,\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the menu items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a menu component.\n * A menu displays a list of actions or options that a user can choose.\n * @param props - Props for the menu.\n * @param state - State for the menu, as returned by `useListState`.\n */\nexport function useMenu<T>(props: AriaMenuOptions<T>, state: TreeState<T>, ref: RefObject<HTMLElement | null>): MenuAria {\n  let {\n    shouldFocusWrap = true,\n    onKeyDown,\n    onKeyUp,\n    ...otherProps\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby'] && process.env.NODE_ENV !== 'production') {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...otherProps,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap,\n    linkBehavior: 'override'\n  });\n\n  menuData.set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus\n  });\n\n  return {\n    menuProps: mergeProps(domProps, {onKeyDown, onKeyUp}, {\n      role: 'menu',\n      ...listProps,\n      onKeyDown: (e) => {\n        // don't clear the menu selected keys if the user is presses escape since escape closes the menu\n        if (e.key !== 'Escape' || props.shouldUseVirtualFocus) {\n          listProps.onKeyDown?.(e);\n        }\n      }\n    })\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;AA4CO,SAASA,0CAAWC,KAAyB,EAAEC,KAAmB,EAAEC,GAAkC;EAC3G,IAAAC,qBAAA,GAKIH,KAAA,CALAI,eAAA;IACFA,eAAA,GAAAD,qBAAA,cAAkB,OAAAA,qBAAA;IAClBE,SAAS,GAGPL,KAAA,CAJgBK,SAAA;IAElBC,OAAO,GAELN,KAAA,CAHOM,OAAA;IAENC,UAAA,GAAAC,wBAAA,CACDR,KAAA,EAAAS,SAAA;EAEJ,IAAI,CAACT,KAAK,CAAC,aAAa,IAAI,CAACA,KAAK,CAAC,kBAAkB,IAAIU,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,cAChFC,OAAA,CAAQC,IAAI,CAAC;EAGf,IAAIC,QAAA,GAAW,IAAAC,qBAAA,CAAAC,cAAa,EAAEjB,KAAA,EAAO;IAACkB,SAAA,EAAW;EAAI;EACrD,IAAAC,IAAA,GAAkB,IAAAC,yBAAA,CAAAC,iBAAgB,EAAAC,MAAA,CAAAC,MAAA,KAC7BhB,UAAU;WACbL,GAAA;MACAsB,gBAAA,EAAkBvB,KAAA,CAAMuB,gBAAgB;MACxCC,UAAA,EAAYxB,KAAA,CAAMwB,UAAU;MAC5BC,YAAA,EAAczB,KAAA,CAAMyB,YAAY;uBAChCtB,eAAA;MACAuB,YAAA,EAAc;IAAA,EAChB;IARKC,SAAS,GAAAT,IAAA,CAAVS,SAAA;EAUJ,IAAAC,yBAAA,CAAAC,QAAO,EAAEC,GAAG,CAAC9B,KAAA,EAAO;IAClB+B,OAAA,EAAShC,KAAA,CAAMgC,OAAO;IACtBC,QAAA,EAAUjC,KAAA,CAAMiC,QAAQ;IACxBC,qBAAA,EAAuBlC,KAAA,CAAMkC;EAC/B;EAEA,OAAO;IACLC,SAAA,EAAW,IAAAnB,qBAAA,CAAAoB,UAAS,EAAErB,QAAA,EAAU;iBAACV,SAAA;eAAWC;IAAO,GAAAgB,MAAA,CAAAC,MAAA;MACjDc,IAAA,EAAM;IAAA,GACHT,SAAS;MACZvB,SAAA,EAAW,SAAXA,UAAYiC,CAAA;YAGRC,oBAAA;QADF,IAAID,CAAA,CAAEE,GAAG,KAAK,YAAYxC,KAAA,CAAMkC,qBAAqB,GACnDK,oBAAA,GAAAX,SAAA,CAAUvB,SAAS,cAAnBkC,oBAAA,uBAAAA,oBAAA,CAAAE,IAAA,CAAAb,SAAA,EAAsBU,CAAA;MAE1B;IAAA,EACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}