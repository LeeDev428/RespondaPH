{"ast":null,"code":"var $27a5ce66022270ad$exports = require(\"./useCollator.main.js\");\nvar $c0oFg$react = require(\"react\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useFilter\", function () {\n  return $832d079b867c7223$export$3274cf84b703fff;\n});\nfunction $832d079b867c7223$export$3274cf84b703fff(options) {\n  var collator = (0, $27a5ce66022270ad$exports.useCollator)(Object.assign({\n    usage: 'search'\n  }, options));\n  var startsWith = (0, $c0oFg$react.useCallback)(function (string, substring) {\n    if (substring.length === 0) return true;\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(0, substring.length), substring) === 0;\n  }, [collator]);\n  var endsWith = (0, $c0oFg$react.useCallback)(function (string, substring) {\n    if (substring.length === 0) return true;\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(-substring.length), substring) === 0;\n  }, [collator]);\n  var contains = (0, $c0oFg$react.useCallback)(function (string, substring) {\n    if (substring.length === 0) return true;\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    var scan = 0;\n    var sliceLen = substring.length;\n    for (; scan + sliceLen <= string.length; scan++) {\n      var slice = string.slice(scan, scan + sliceLen);\n      if (collator.compare(substring, slice) === 0) return true;\n    }\n    return false;\n  }, [collator]);\n  return (0, $c0oFg$react.useMemo)(function () {\n    return {\n      startsWith: startsWith,\n      endsWith: endsWith,\n      contains: contains\n    };\n  }, [startsWith, endsWith, contains]);\n}","map":{"version":3,"names":["$832d079b867c7223$export$3274cf84b703fff","options","collator","$27a5ce66022270ad$exports","useCollator","Object","assign","usage","startsWith","$c0oFg$react","useCallback","string","substring","length","normalize","compare","slice","endsWith","contains","scan","sliceLen","useMemo"],"sources":["D:\\Programming\\Systems\\Hybrid-Systems\\RespondaPH\\mobile\\node_modules\\@react-aria\\i18n\\dist\\packages\\@react-aria\\i18n\\src\\useFilter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useMemo} from 'react';\nimport {useCollator} from './useCollator';\n\nexport interface Filter {\n  /** Returns whether a string starts with a given substring. */\n  startsWith(string: string, substring: string): boolean,\n  /** Returns whether a string ends with a given substring. */\n  endsWith(string: string, substring: string): boolean,\n  /** Returns whether a string contains a given substring. */\n  contains(string: string, substring: string): boolean\n}\n\n/**\n * Provides localized string search functionality that is useful for filtering or matching items\n * in a list. Options can be provided to adjust the sensitivity to case, diacritics, and other parameters.\n */\nexport function useFilter(options?: Intl.CollatorOptions): Filter {\n  let collator = useCollator({\n    usage: 'search',\n    ...options\n  });\n\n  // TODO(later): these methods don't currently support the ignorePunctuation option.\n  let startsWith = useCallback((string, substring) => {\n    if (substring.length === 0) {\n      return true;\n    }\n\n    // Normalize both strings so we can slice safely\n    // TODO: take into account the ignorePunctuation option as well...\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(0, substring.length), substring) === 0;\n  }, [collator]);\n\n  let endsWith = useCallback((string, substring) => {\n    if (substring.length === 0) {\n      return true;\n    }\n\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(-substring.length), substring) === 0;\n  }, [collator]);\n\n  let contains = useCallback((string, substring) => {\n    if (substring.length === 0) {\n      return true;\n    }\n\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n\n    let scan = 0;\n    let sliceLen = substring.length;\n    for (; scan + sliceLen <= string.length; scan++) {\n      let slice = string.slice(scan, scan + sliceLen);\n      if (collator.compare(substring, slice) === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [collator]);\n\n  return useMemo(() => ({\n    startsWith,\n    endsWith,\n    contains\n  }), [startsWith, endsWith, contains]);\n}\n"],"mappings":";;;;;;;;;;;;;AA4BO,SAASA,yCAAUC,OAA8B;EACtD,IAAIC,QAAA,GAAW,IAAAC,yBAAA,CAAAC,WAAU,EAAAC,MAAA,CAAAC,MAAA;IACvBC,KAAA,EAAO;EAAA,GACJN,OAAO,CACZ;EAGA,IAAIO,UAAA,GAAa,IAAAC,YAAA,CAAAC,WAAU,EAAE,UAACC,MAAA,EAAQC,SAAA;IACpC,IAAIA,SAAA,CAAUC,MAAM,KAAK,GACvB,OAAO;IAKTF,MAAA,GAASA,MAAA,CAAOG,SAAS,CAAC;IAC1BF,SAAA,GAAYA,SAAA,CAAUE,SAAS,CAAC;IAChC,OAAOZ,QAAA,CAASa,OAAO,CAACJ,MAAA,CAAOK,KAAK,CAAC,GAAGJ,SAAA,CAAUC,MAAM,GAAGD,SAAA,MAAe;EAC5E,GAAG,CAACV,QAAA,CAAS;EAEb,IAAIe,QAAA,GAAW,IAAAR,YAAA,CAAAC,WAAU,EAAE,UAACC,MAAA,EAAQC,SAAA;IAClC,IAAIA,SAAA,CAAUC,MAAM,KAAK,GACvB,OAAO;IAGTF,MAAA,GAASA,MAAA,CAAOG,SAAS,CAAC;IAC1BF,SAAA,GAAYA,SAAA,CAAUE,SAAS,CAAC;IAChC,OAAOZ,QAAA,CAASa,OAAO,CAACJ,MAAA,CAAOK,KAAK,CAAC,CAACJ,SAAA,CAAUC,MAAM,GAAGD,SAAA,MAAe;EAC1E,GAAG,CAACV,QAAA,CAAS;EAEb,IAAIgB,QAAA,GAAW,IAAAT,YAAA,CAAAC,WAAU,EAAE,UAACC,MAAA,EAAQC,SAAA;IAClC,IAAIA,SAAA,CAAUC,MAAM,KAAK,GACvB,OAAO;IAGTF,MAAA,GAASA,MAAA,CAAOG,SAAS,CAAC;IAC1BF,SAAA,GAAYA,SAAA,CAAUE,SAAS,CAAC;IAEhC,IAAIK,IAAA,GAAO;IACX,IAAIC,QAAA,GAAWR,SAAA,CAAUC,MAAM;IAC/B,OAAOM,IAAA,GAAOC,QAAA,IAAYT,MAAA,CAAOE,MAAM,EAAEM,IAAA,IAAQ;MAC/C,IAAIH,KAAA,GAAQL,MAAA,CAAOK,KAAK,CAACG,IAAA,EAAMA,IAAA,GAAOC,QAAA;MACtC,IAAIlB,QAAA,CAASa,OAAO,CAACH,SAAA,EAAWI,KAAA,MAAW,GACzC,OAAO;IAEX;IAEA,OAAO;EACT,GAAG,CAACd,QAAA,CAAS;EAEb,OAAO,IAAAO,YAAA,CAAAY,OAAM,EAAE;IAAA,OAAO;kBACpBb,UAAA;gBACAS,QAAA;gBACAC;IACF;EAAA,GAAI,CAACV,UAAA,EAAYS,QAAA,EAAUC,QAAA,CAAS;AACtC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}